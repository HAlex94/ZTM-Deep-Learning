{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Practice - Boston Pricing Dataset","provenance":[],"authorship_tag":"ABX9TyPAsN082f+V7r+wRFk0wP8O"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"92Ayi4qDqPff"},"source":["\n","\n","**Objective:** Samples contain 13 attributes of houses at different locations around the Boston suburbs in the late 1970s. Targets are the median values of the houses at a location (in k$).\n"]},{"cell_type":"code","metadata":{"id":"WWK1LBxapgc2","executionInfo":{"status":"ok","timestamp":1658606237244,"user_tz":300,"elapsed":6746,"user":{"displayName":"Hector Alejandro Fernandez","userId":"11581287658742360806"}}},"source":["# Import required libraries\n","import tensorflow as tf\n","import pandas as pd\n","import matplotlib.pyplot as plt"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"id":"JrnTr5N9blFo","executionInfo":{"status":"ok","timestamp":1658606448490,"user_tz":300,"elapsed":146,"user":{"displayName":"Hector Alejandro Fernandez","userId":"11581287658742360806"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"e6712d26-1645-47fd-95aa-42e7a4e39651"},"source":["# import the boston datasets from tensorflow datasets \n","(X_train , y_train) , (X_test , y_test) = tf.keras.datasets.boston_housing.load_data(path = 'boston_housing_npz', \n","                                                                                     test_split = 0.2, \n","                                                                                     seed = 42)"],"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/boston_housing.npz\n","57344/57026 [==============================] - 0s 0us/step\n","65536/57026 [==================================] - 0s 0us/step\n"]}]},{"cell_type":"code","source":["# Checkin the shape of our data \n","X_train.shape , X_test.shape , y_train.shape , y_test.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zUead8fTot23","executionInfo":{"status":"ok","timestamp":1658606458725,"user_tz":300,"elapsed":134,"user":{"displayName":"Hector Alejandro Fernandez","userId":"11581287658742360806"}},"outputId":"26782216-2080-4d22-ed01-f81e9ccacbbb"},"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((404, 13), (102, 13), (404,), (102,))"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","metadata":{"id":"W59EqfqYimnR","executionInfo":{"status":"ok","timestamp":1658606752823,"user_tz":300,"elapsed":3751,"user":{"displayName":"Hector Alejandro Fernandez","userId":"11581287658742360806"}}},"source":["# Set random seed\n","tf.random.set_seed(42)\n","\n","# Add an extra layer and increase number of units\n","model_1 = tf.keras.Sequential([\n","  tf.keras.layers.Dense(100), # 100 units\n","  tf.keras.layers.Dense(10), # 10 units\n","  tf.keras.layers.Dense(1) # 1 unit (important for output layer)\n","])\n","\n","# Compile the model\n","model_1.compile(loss=tf.keras.losses.mae,\n","                          optimizer=tf.keras.optimizers.Adam(learning_rate=0.1), # Adam works but SGD doesn't \n","                          metrics=['mae'])\n","\n","# Fit the model and save the history (we can plot this)\n","history = model_1.fit(X_train, y_train, epochs=100, verbose=0)"],"execution_count":7,"outputs":[]},{"cell_type":"code","metadata":{"id":"k9IbYWnOqmoT","colab":{"base_uri":"https://localhost:8080/"},"outputId":"925186f9-a48e-4b91-9206-a07c956e5c41","executionInfo":{"status":"ok","timestamp":1658606815486,"user_tz":300,"elapsed":399,"user":{"displayName":"Hector Alejandro Fernandez","userId":"11581287658742360806"}}},"source":["# Evaluate our larger model\n","model_1.evaluate(X_test, y_test)"],"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["4/4 [==============================] - 0s 7ms/step - loss: 3.5985 - mae: 3.5985\n"]},{"output_type":"execute_result","data":{"text/plain":["[3.598512649536133, 3.598512649536133]"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","metadata":{"id":"9SE55ANojcF_","colab":{"base_uri":"https://localhost:8080/","height":279},"outputId":"a7a29d29-d864-48e9-f3c0-63bef84f49f2","executionInfo":{"status":"ok","timestamp":1658606879412,"user_tz":300,"elapsed":530,"user":{"displayName":"Hector Alejandro Fernandez","userId":"11581287658742360806"}}},"source":["# Plot history (also known as a loss curve)\n","pd.DataFrame(history.history).plot()\n","plt.ylabel(\"loss\")\n","plt.xlabel(\"epochs\");"],"execution_count":10,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]}]}