{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Regression Example - Medical Insurance Cost Prediction","provenance":[],"authorship_tag":"ABX9TyOPw+yEo028W0xJxVz0Fytq"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"r68zLCXxqFnT"},"source":["\n","**Objective:** predict the cost of medical insurance for individuals based on a number of different parameters such as, `age`, `sex`, `bmi`, `children`, `smoking_status` and `residential_region`.\n","\n","To do, we'll leverage the pubically available [Medical Cost dataset](https://www.kaggle.com/mirichoi0218/insurance) available from Kaggle and [hosted on GitHub](https://github.com/stedy/Machine-Learning-with-R-datasets/blob/master/insurance.csv).\n","\n","> ðŸ”‘ **Note:** When learning machine learning paradigms, you'll often go through a series of foundational techniques and then practice them by working with open-source datasets and examples. Just as we're doing now, learn foundations, put them to work with different problems. Every time you work on something new, it's a good idea to search for something like \"problem X example with Python/TensorFlow\" where you substitute X for your problem."]},{"cell_type":"code","metadata":{"id":"WWK1LBxapgc2"},"source":["# Import required libraries\n","import tensorflow as tf\n","import pandas as pd\n","import matplotlib.pyplot as plt"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"JrnTr5N9blFo"},"source":["# Read in the insurance dataset\n","insurance = pd.read_csv(\"https://raw.githubusercontent.com/stedy/Machine-Learning-with-R-datasets/master/insurance.csv\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"QtXPN7cfb4Nm","colab":{"base_uri":"https://localhost:8080/","height":206},"outputId":"55f5fcfa-0abd-404d-8b44-c04596f1ded8","executionInfo":{"status":"ok","timestamp":1658601462799,"user_tz":300,"elapsed":149,"user":{"displayName":"Hector Alejandro Fernandez","userId":"11581287658742360806"}}},"source":["# Check out the insurance dataset\n","insurance.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   age     sex     bmi  children smoker     region      charges\n","0   19  female  27.900         0    yes  southwest  16884.92400\n","1   18    male  33.770         1     no  southeast   1725.55230\n","2   28    male  33.000         3     no  southeast   4449.46200\n","3   33    male  22.705         0     no  northwest  21984.47061\n","4   32    male  28.880         0     no  northwest   3866.85520"],"text/html":["\n","  <div id=\"df-860f6e5e-74ee-44cc-ae55-b3f6dbfb9abc\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>age</th>\n","      <th>sex</th>\n","      <th>bmi</th>\n","      <th>children</th>\n","      <th>smoker</th>\n","      <th>region</th>\n","      <th>charges</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>19</td>\n","      <td>female</td>\n","      <td>27.900</td>\n","      <td>0</td>\n","      <td>yes</td>\n","      <td>southwest</td>\n","      <td>16884.92400</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>18</td>\n","      <td>male</td>\n","      <td>33.770</td>\n","      <td>1</td>\n","      <td>no</td>\n","      <td>southeast</td>\n","      <td>1725.55230</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>28</td>\n","      <td>male</td>\n","      <td>33.000</td>\n","      <td>3</td>\n","      <td>no</td>\n","      <td>southeast</td>\n","      <td>4449.46200</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>33</td>\n","      <td>male</td>\n","      <td>22.705</td>\n","      <td>0</td>\n","      <td>no</td>\n","      <td>northwest</td>\n","      <td>21984.47061</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>32</td>\n","      <td>male</td>\n","      <td>28.880</td>\n","      <td>0</td>\n","      <td>no</td>\n","      <td>northwest</td>\n","      <td>3866.85520</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-860f6e5e-74ee-44cc-ae55-b3f6dbfb9abc')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-860f6e5e-74ee-44cc-ae55-b3f6dbfb9abc button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-860f6e5e-74ee-44cc-ae55-b3f6dbfb9abc');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["len(insurance)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XcHTVTfJYGLA","executionInfo":{"status":"ok","timestamp":1658601904268,"user_tz":300,"elapsed":151,"user":{"displayName":"Hector Alejandro Fernandez","userId":"11581287658742360806"}},"outputId":"a786ae77-8e06-4dd5-b655-f6419c3102b4"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1338"]},"metadata":{},"execution_count":7}]},{"cell_type":"markdown","metadata":{"id":"s55oIsYv0KkZ"},"source":["We're going to have to turn the non-numerical columns into numbers (because a neural network can't handle non-numerical inputs).\n","\n","To do so, we'll use the [`get_dummies()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.get_dummies.html) method in pandas.\n","\n","It converts categorical variables (like the `sex`, `smoker` and `region` columns) into numerical variables using one-hot encoding."]},{"cell_type":"code","metadata":{"id":"MqM_BmPkdon8","colab":{"base_uri":"https://localhost:8080/","height":270},"outputId":"4b5b5f32-f5c3-48fe-9b33-2b3e64fce692","executionInfo":{"status":"ok","timestamp":1658601709951,"user_tz":300,"elapsed":127,"user":{"displayName":"Hector Alejandro Fernandez","userId":"11581287658742360806"}}},"source":["# Turn all categories into numbers\n","insurance_one_hot = pd.get_dummies(insurance)\n","insurance_one_hot.head() # view the converted columns"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   age     bmi  children      charges  sex_female  sex_male  smoker_no  \\\n","0   19  27.900         0  16884.92400           1         0          0   \n","1   18  33.770         1   1725.55230           0         1          1   \n","2   28  33.000         3   4449.46200           0         1          1   \n","3   33  22.705         0  21984.47061           0         1          1   \n","4   32  28.880         0   3866.85520           0         1          1   \n","\n","   smoker_yes  region_northeast  region_northwest  region_southeast  \\\n","0           1                 0                 0                 0   \n","1           0                 0                 0                 1   \n","2           0                 0                 0                 1   \n","3           0                 0                 1                 0   \n","4           0                 0                 1                 0   \n","\n","   region_southwest  \n","0                 1  \n","1                 0  \n","2                 0  \n","3                 0  \n","4                 0  "],"text/html":["\n","  <div id=\"df-a9ecb35d-b686-4c50-97a3-a67a1f356af8\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>age</th>\n","      <th>bmi</th>\n","      <th>children</th>\n","      <th>charges</th>\n","      <th>sex_female</th>\n","      <th>sex_male</th>\n","      <th>smoker_no</th>\n","      <th>smoker_yes</th>\n","      <th>region_northeast</th>\n","      <th>region_northwest</th>\n","      <th>region_southeast</th>\n","      <th>region_southwest</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>19</td>\n","      <td>27.900</td>\n","      <td>0</td>\n","      <td>16884.92400</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>18</td>\n","      <td>33.770</td>\n","      <td>1</td>\n","      <td>1725.55230</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>28</td>\n","      <td>33.000</td>\n","      <td>3</td>\n","      <td>4449.46200</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>33</td>\n","      <td>22.705</td>\n","      <td>0</td>\n","      <td>21984.47061</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>32</td>\n","      <td>28.880</td>\n","      <td>0</td>\n","      <td>3866.85520</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a9ecb35d-b686-4c50-97a3-a67a1f356af8')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-a9ecb35d-b686-4c50-97a3-a67a1f356af8 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-a9ecb35d-b686-4c50-97a3-a67a1f356af8');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":4}]},{"cell_type":"markdown","metadata":{"id":"zOHoPzgqgZPq"},"source":["Now we'll split data into features (`X`) and labels (`y`)."]},{"cell_type":"code","metadata":{"id":"W_EGj3FxhkAb"},"source":["# Create X & y values\n","X = insurance_one_hot.drop(\"charges\", axis=1)\n","y = insurance_one_hot[\"charges\"]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":270},"id":"-QQFJmDn5ATV","outputId":"da4b2c42-88e6-48fe-cdb5-54bfa3ebbc15","executionInfo":{"status":"ok","timestamp":1658601858993,"user_tz":300,"elapsed":142,"user":{"displayName":"Hector Alejandro Fernandez","userId":"11581287658742360806"}}},"source":["# View features\n","X.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   age     bmi  children  sex_female  sex_male  smoker_no  smoker_yes  \\\n","0   19  27.900         0           1         0          0           1   \n","1   18  33.770         1           0         1          1           0   \n","2   28  33.000         3           0         1          1           0   \n","3   33  22.705         0           0         1          1           0   \n","4   32  28.880         0           0         1          1           0   \n","\n","   region_northeast  region_northwest  region_southeast  region_southwest  \n","0                 0                 0                 0                 1  \n","1                 0                 0                 1                 0  \n","2                 0                 0                 1                 0  \n","3                 0                 1                 0                 0  \n","4                 0                 1                 0                 0  "],"text/html":["\n","  <div id=\"df-1fe88e40-1bcc-4d7c-92a5-980ce2c16768\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>age</th>\n","      <th>bmi</th>\n","      <th>children</th>\n","      <th>sex_female</th>\n","      <th>sex_male</th>\n","      <th>smoker_no</th>\n","      <th>smoker_yes</th>\n","      <th>region_northeast</th>\n","      <th>region_northwest</th>\n","      <th>region_southeast</th>\n","      <th>region_southwest</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>19</td>\n","      <td>27.900</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>18</td>\n","      <td>33.770</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>28</td>\n","      <td>33.000</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>33</td>\n","      <td>22.705</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>32</td>\n","      <td>28.880</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1fe88e40-1bcc-4d7c-92a5-980ce2c16768')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-1fe88e40-1bcc-4d7c-92a5-980ce2c16768 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-1fe88e40-1bcc-4d7c-92a5-980ce2c16768');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":6}]},{"cell_type":"markdown","metadata":{"id":"kudhkM-0giS1"},"source":["And create training and test sets. We could do this manually, but to make it easier, we'll leverage the already available [`train_test_split`](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html) function available from Scikit-Learn."]},{"cell_type":"code","metadata":{"id":"WPGZGk0jhxCZ"},"source":["# Create training and test sets\n","from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(X, \n","                                                    y, \n","                                                    test_size=0.2, \n","                                                    random_state=42) # set random state for reproducible splits"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"W8wEC0FPglnN"},"source":["Now we can build and fit a model (we'll make it the same as `model_2`)."]},{"cell_type":"code","metadata":{"id":"OCXTmz6oh_T6","colab":{"base_uri":"https://localhost:8080/"},"outputId":"9443667e-b660-43f0-f6ba-9fa3a032f85a","executionInfo":{"status":"ok","timestamp":1658603632916,"user_tz":300,"elapsed":14299,"user":{"displayName":"Hector Alejandro Fernandez","userId":"11581287658742360806"}}},"source":["# Set random seed\n","tf.random.set_seed(42)\n","\n","# Create a new model (same as model_2)\n","insurance_model = tf.keras.Sequential([\n","  tf.keras.layers.Dense(100), # 10 units\n","  tf.keras.layers.Dense(1) # 1 unit (important for output layer)\n","])\n","\n","# Compile the model\n","insurance_model.compile(loss=tf.keras.losses.mae,\n","                        optimizer=tf.keras.optimizers.Adam(learning_rate=0.1),\n","                        metrics=['mae'])\n","\n","# Fit the model\n","insurance_model.fit(X_train, y_train, epochs=200)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/200\n","34/34 [==============================] - 1s 2ms/step - loss: 8871.6191 - mae: 8871.6191\n","Epoch 2/200\n","34/34 [==============================] - 0s 2ms/step - loss: 7086.2046 - mae: 7086.2046\n","Epoch 3/200\n","34/34 [==============================] - 0s 3ms/step - loss: 6414.8320 - mae: 6414.8320\n","Epoch 4/200\n","34/34 [==============================] - 0s 2ms/step - loss: 5960.5864 - mae: 5960.5864\n","Epoch 5/200\n","34/34 [==============================] - 0s 1ms/step - loss: 5293.5938 - mae: 5293.5938\n","Epoch 6/200\n","34/34 [==============================] - 0s 1ms/step - loss: 4333.2461 - mae: 4333.2461\n","Epoch 7/200\n","34/34 [==============================] - 0s 1ms/step - loss: 3878.4409 - mae: 3878.4409\n","Epoch 8/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3988.2556 - mae: 3988.2556\n","Epoch 9/200\n","34/34 [==============================] - 0s 1ms/step - loss: 3779.6199 - mae: 3779.6199\n","Epoch 10/200\n","34/34 [==============================] - 0s 1ms/step - loss: 3830.8079 - mae: 3830.8079\n","Epoch 11/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3786.1821 - mae: 3786.1821\n","Epoch 12/200\n","34/34 [==============================] - 0s 1ms/step - loss: 3761.3159 - mae: 3761.3159\n","Epoch 13/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3813.4297 - mae: 3813.4297\n","Epoch 14/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3754.2319 - mae: 3754.2319\n","Epoch 15/200\n","34/34 [==============================] - 0s 1ms/step - loss: 3771.0618 - mae: 3771.0618\n","Epoch 16/200\n","34/34 [==============================] - 0s 1ms/step - loss: 3823.9336 - mae: 3823.9336\n","Epoch 17/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3688.1426 - mae: 3688.1426\n","Epoch 18/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3692.3953 - mae: 3692.3953\n","Epoch 19/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3675.0742 - mae: 3675.0742\n","Epoch 20/200\n","34/34 [==============================] - 0s 1ms/step - loss: 3640.1843 - mae: 3640.1843\n","Epoch 21/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3853.6619 - mae: 3853.6619\n","Epoch 22/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3708.8877 - mae: 3708.8877\n","Epoch 23/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3596.6006 - mae: 3596.6006\n","Epoch 24/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3594.4106 - mae: 3594.4106\n","Epoch 25/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3677.2634 - mae: 3677.2634\n","Epoch 26/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3584.3735 - mae: 3584.3735\n","Epoch 27/200\n","34/34 [==============================] - 0s 1ms/step - loss: 3639.6526 - mae: 3639.6526\n","Epoch 28/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3622.3240 - mae: 3622.3240\n","Epoch 29/200\n","34/34 [==============================] - 0s 1ms/step - loss: 3576.2246 - mae: 3576.2246\n","Epoch 30/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3599.6067 - mae: 3599.6067\n","Epoch 31/200\n","34/34 [==============================] - 0s 1ms/step - loss: 3643.4685 - mae: 3643.4685\n","Epoch 32/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3665.7859 - mae: 3665.7859\n","Epoch 33/200\n","34/34 [==============================] - 0s 1ms/step - loss: 3611.7373 - mae: 3611.7373\n","Epoch 34/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3661.1331 - mae: 3661.1331\n","Epoch 35/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3551.5151 - mae: 3551.5151\n","Epoch 36/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3766.7944 - mae: 3766.7944\n","Epoch 37/200\n","34/34 [==============================] - 0s 1ms/step - loss: 3606.8474 - mae: 3606.8474\n","Epoch 38/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3545.7180 - mae: 3545.7180\n","Epoch 39/200\n","34/34 [==============================] - 0s 1ms/step - loss: 3512.2539 - mae: 3512.2539\n","Epoch 40/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3570.0022 - mae: 3570.0022\n","Epoch 41/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3535.7363 - mae: 3535.7363\n","Epoch 42/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3558.5637 - mae: 3558.5637\n","Epoch 43/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3544.6450 - mae: 3544.6450\n","Epoch 44/200\n","34/34 [==============================] - 0s 1ms/step - loss: 3542.1555 - mae: 3542.1555\n","Epoch 45/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3558.4050 - mae: 3558.4050\n","Epoch 46/200\n","34/34 [==============================] - 0s 1ms/step - loss: 3553.4333 - mae: 3553.4333\n","Epoch 47/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3584.9192 - mae: 3584.9192\n","Epoch 48/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3630.1133 - mae: 3630.1133\n","Epoch 49/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3545.2292 - mae: 3545.2292\n","Epoch 50/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3621.9646 - mae: 3621.9646\n","Epoch 51/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3539.6099 - mae: 3539.6099\n","Epoch 52/200\n","34/34 [==============================] - 0s 1ms/step - loss: 3529.7886 - mae: 3529.7886\n","Epoch 53/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3528.5913 - mae: 3528.5913\n","Epoch 54/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3672.6699 - mae: 3672.6699\n","Epoch 55/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3595.6990 - mae: 3595.6990\n","Epoch 56/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3720.5256 - mae: 3720.5256\n","Epoch 57/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3555.5203 - mae: 3555.5203\n","Epoch 58/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3552.6858 - mae: 3552.6858\n","Epoch 59/200\n","34/34 [==============================] - 0s 1ms/step - loss: 3564.5442 - mae: 3564.5442\n","Epoch 60/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3535.2207 - mae: 3535.2207\n","Epoch 61/200\n","34/34 [==============================] - 0s 1ms/step - loss: 3623.7900 - mae: 3623.7900\n","Epoch 62/200\n","34/34 [==============================] - 0s 1ms/step - loss: 3541.4456 - mae: 3541.4456\n","Epoch 63/200\n","34/34 [==============================] - 0s 1ms/step - loss: 3524.9565 - mae: 3524.9565\n","Epoch 64/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3546.0144 - mae: 3546.0144\n","Epoch 65/200\n","34/34 [==============================] - 0s 1ms/step - loss: 3522.0879 - mae: 3522.0879\n","Epoch 66/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3589.4258 - mae: 3589.4258\n","Epoch 67/200\n","34/34 [==============================] - 0s 1ms/step - loss: 3539.7495 - mae: 3539.7495\n","Epoch 68/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3779.6421 - mae: 3779.6421\n","Epoch 69/200\n","34/34 [==============================] - 0s 1ms/step - loss: 3654.6387 - mae: 3654.6387\n","Epoch 70/200\n","34/34 [==============================] - 0s 1ms/step - loss: 3577.2859 - mae: 3577.2859\n","Epoch 71/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3631.2908 - mae: 3631.2908\n","Epoch 72/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3610.5618 - mae: 3610.5618\n","Epoch 73/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3585.7100 - mae: 3585.7100\n","Epoch 74/200\n","34/34 [==============================] - 0s 1ms/step - loss: 3593.3665 - mae: 3593.3665\n","Epoch 75/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3566.0527 - mae: 3566.0527\n","Epoch 76/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3555.3242 - mae: 3555.3242\n","Epoch 77/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3636.3645 - mae: 3636.3645\n","Epoch 78/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3701.3408 - mae: 3701.3408\n","Epoch 79/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3577.9014 - mae: 3577.9014\n","Epoch 80/200\n","34/34 [==============================] - 0s 1ms/step - loss: 3588.3086 - mae: 3588.3086\n","Epoch 81/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3619.5977 - mae: 3619.5977\n","Epoch 82/200\n","34/34 [==============================] - 0s 1ms/step - loss: 3624.9482 - mae: 3624.9482\n","Epoch 83/200\n","34/34 [==============================] - 0s 1ms/step - loss: 3621.4316 - mae: 3621.4316\n","Epoch 84/200\n","34/34 [==============================] - 0s 1ms/step - loss: 3583.4258 - mae: 3583.4258\n","Epoch 85/200\n","34/34 [==============================] - 0s 1ms/step - loss: 3554.1267 - mae: 3554.1267\n","Epoch 86/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3519.7546 - mae: 3519.7546\n","Epoch 87/200\n","34/34 [==============================] - 0s 1ms/step - loss: 3645.1816 - mae: 3645.1816\n","Epoch 88/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3511.7693 - mae: 3511.7693\n","Epoch 89/200\n","34/34 [==============================] - 0s 1ms/step - loss: 3595.5559 - mae: 3595.5559\n","Epoch 90/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3559.2581 - mae: 3559.2581\n","Epoch 91/200\n","34/34 [==============================] - 0s 1ms/step - loss: 3586.7271 - mae: 3586.7271\n","Epoch 92/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3571.0801 - mae: 3571.0801\n","Epoch 93/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3648.6584 - mae: 3648.6584\n","Epoch 94/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3650.7075 - mae: 3650.7075\n","Epoch 95/200\n","34/34 [==============================] - 0s 1ms/step - loss: 3541.5198 - mae: 3541.5198\n","Epoch 96/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3546.8057 - mae: 3546.8057\n","Epoch 97/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3576.1768 - mae: 3576.1768\n","Epoch 98/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3524.7446 - mae: 3524.7446\n","Epoch 99/200\n","34/34 [==============================] - 0s 1ms/step - loss: 3583.7166 - mae: 3583.7166\n","Epoch 100/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3513.9153 - mae: 3513.9153\n","Epoch 101/200\n","34/34 [==============================] - 0s 1ms/step - loss: 3513.6836 - mae: 3513.6836\n","Epoch 102/200\n","34/34 [==============================] - 0s 1ms/step - loss: 3554.3831 - mae: 3554.3831\n","Epoch 103/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3532.2390 - mae: 3532.2390\n","Epoch 104/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3502.3232 - mae: 3502.3232\n","Epoch 105/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3542.7798 - mae: 3542.7798\n","Epoch 106/200\n","34/34 [==============================] - 0s 1ms/step - loss: 3539.8665 - mae: 3539.8665\n","Epoch 107/200\n","34/34 [==============================] - 0s 1ms/step - loss: 3535.8938 - mae: 3535.8938\n","Epoch 108/200\n","34/34 [==============================] - 0s 1ms/step - loss: 3520.4641 - mae: 3520.4641\n","Epoch 109/200\n","34/34 [==============================] - 0s 1ms/step - loss: 3547.9165 - mae: 3547.9165\n","Epoch 110/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3539.4702 - mae: 3539.4702\n","Epoch 111/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3646.9548 - mae: 3646.9548\n","Epoch 112/200\n","34/34 [==============================] - 0s 1ms/step - loss: 3511.6467 - mae: 3511.6467\n","Epoch 113/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3615.0935 - mae: 3615.0935\n","Epoch 114/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3556.1655 - mae: 3556.1655\n","Epoch 115/200\n","34/34 [==============================] - 0s 1ms/step - loss: 3545.5393 - mae: 3545.5393\n","Epoch 116/200\n","34/34 [==============================] - 0s 1ms/step - loss: 3759.1707 - mae: 3759.1707\n","Epoch 117/200\n","34/34 [==============================] - 0s 1ms/step - loss: 3555.0325 - mae: 3555.0325\n","Epoch 118/200\n","34/34 [==============================] - 0s 1ms/step - loss: 3507.5781 - mae: 3507.5781\n","Epoch 119/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3553.9016 - mae: 3553.9016\n","Epoch 120/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3578.6233 - mae: 3578.6233\n","Epoch 121/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3645.1396 - mae: 3645.1396\n","Epoch 122/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3605.1338 - mae: 3605.1338\n","Epoch 123/200\n","34/34 [==============================] - 0s 1ms/step - loss: 3651.5574 - mae: 3651.5574\n","Epoch 124/200\n","34/34 [==============================] - 0s 1ms/step - loss: 3592.6521 - mae: 3592.6521\n","Epoch 125/200\n","34/34 [==============================] - 0s 1ms/step - loss: 3674.5171 - mae: 3674.5171\n","Epoch 126/200\n","34/34 [==============================] - 0s 1ms/step - loss: 3576.7388 - mae: 3576.7388\n","Epoch 127/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3533.1433 - mae: 3533.1433\n","Epoch 128/200\n","34/34 [==============================] - 0s 1ms/step - loss: 3570.8555 - mae: 3570.8555\n","Epoch 129/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3604.9343 - mae: 3604.9343\n","Epoch 130/200\n","34/34 [==============================] - 0s 1ms/step - loss: 3558.5332 - mae: 3558.5332\n","Epoch 131/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3591.9543 - mae: 3591.9543\n","Epoch 132/200\n","34/34 [==============================] - 0s 1ms/step - loss: 3653.5415 - mae: 3653.5415\n","Epoch 133/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3550.5281 - mae: 3550.5281\n","Epoch 134/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3543.6682 - mae: 3543.6682\n","Epoch 135/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3535.7932 - mae: 3535.7932\n","Epoch 136/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3528.4509 - mae: 3528.4509\n","Epoch 137/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3523.4265 - mae: 3523.4265\n","Epoch 138/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3563.7197 - mae: 3563.7197\n","Epoch 139/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3576.0325 - mae: 3576.0325\n","Epoch 140/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3542.7737 - mae: 3542.7737\n","Epoch 141/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3637.3452 - mae: 3637.3452\n","Epoch 142/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3560.4270 - mae: 3560.4270\n","Epoch 143/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3589.8647 - mae: 3589.8647\n","Epoch 144/200\n","34/34 [==============================] - 0s 1ms/step - loss: 3543.1931 - mae: 3543.1931\n","Epoch 145/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3567.2488 - mae: 3567.2488\n","Epoch 146/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3591.3625 - mae: 3591.3625\n","Epoch 147/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3539.3887 - mae: 3539.3887\n","Epoch 148/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3528.0430 - mae: 3528.0430\n","Epoch 149/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3615.3977 - mae: 3615.3977\n","Epoch 150/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3501.9053 - mae: 3501.9053\n","Epoch 151/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3515.3411 - mae: 3515.3411\n","Epoch 152/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3564.3938 - mae: 3564.3938\n","Epoch 153/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3539.1133 - mae: 3539.1133\n","Epoch 154/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3701.4541 - mae: 3701.4541\n","Epoch 155/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3569.1487 - mae: 3569.1487\n","Epoch 156/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3549.4563 - mae: 3549.4563\n","Epoch 157/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3530.1592 - mae: 3530.1592\n","Epoch 158/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3533.4763 - mae: 3533.4763\n","Epoch 159/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3504.1897 - mae: 3504.1897\n","Epoch 160/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3568.5405 - mae: 3568.5405\n","Epoch 161/200\n","34/34 [==============================] - 0s 1ms/step - loss: 3523.4622 - mae: 3523.4622\n","Epoch 162/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3514.4526 - mae: 3514.4526\n","Epoch 163/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3630.5598 - mae: 3630.5598\n","Epoch 164/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3580.9263 - mae: 3580.9263\n","Epoch 165/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3536.4021 - mae: 3536.4021\n","Epoch 166/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3534.5371 - mae: 3534.5371\n","Epoch 167/200\n","34/34 [==============================] - 0s 1ms/step - loss: 3543.9885 - mae: 3543.9885\n","Epoch 168/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3584.4575 - mae: 3584.4575\n","Epoch 169/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3559.4685 - mae: 3559.4685\n","Epoch 170/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3568.6567 - mae: 3568.6567\n","Epoch 171/200\n","34/34 [==============================] - 0s 1ms/step - loss: 3619.6443 - mae: 3619.6443\n","Epoch 172/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3523.7805 - mae: 3523.7805\n","Epoch 173/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3542.3254 - mae: 3542.3254\n","Epoch 174/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3521.2610 - mae: 3521.2610\n","Epoch 175/200\n","34/34 [==============================] - 0s 1ms/step - loss: 3546.8425 - mae: 3546.8425\n","Epoch 176/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3530.7402 - mae: 3530.7402\n","Epoch 177/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3534.9558 - mae: 3534.9558\n","Epoch 178/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3570.0100 - mae: 3570.0100\n","Epoch 179/200\n","34/34 [==============================] - 0s 1ms/step - loss: 3570.2798 - mae: 3570.2798\n","Epoch 180/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3544.8833 - mae: 3544.8833\n","Epoch 181/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3544.7175 - mae: 3544.7175\n","Epoch 182/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3528.0627 - mae: 3528.0627\n","Epoch 183/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3602.2910 - mae: 3602.2910\n","Epoch 184/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3537.7942 - mae: 3537.7942\n","Epoch 185/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3503.0745 - mae: 3503.0745\n","Epoch 186/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3638.9382 - mae: 3638.9382\n","Epoch 187/200\n","34/34 [==============================] - 0s 1ms/step - loss: 3615.3572 - mae: 3615.3572\n","Epoch 188/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3535.0500 - mae: 3535.0500\n","Epoch 189/200\n","34/34 [==============================] - 0s 1ms/step - loss: 3564.4871 - mae: 3564.4871\n","Epoch 190/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3564.6716 - mae: 3564.6716\n","Epoch 191/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3554.1860 - mae: 3554.1860\n","Epoch 192/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3527.6428 - mae: 3527.6428\n","Epoch 193/200\n","34/34 [==============================] - 0s 1ms/step - loss: 3534.4531 - mae: 3534.4531\n","Epoch 194/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3582.2744 - mae: 3582.2744\n","Epoch 195/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3662.3955 - mae: 3662.3955\n","Epoch 196/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3542.7788 - mae: 3542.7788\n","Epoch 197/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3544.9299 - mae: 3544.9299\n","Epoch 198/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3584.9697 - mae: 3584.9697\n","Epoch 199/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3554.5872 - mae: 3554.5872\n","Epoch 200/200\n","34/34 [==============================] - 0s 2ms/step - loss: 3526.6047 - mae: 3526.6047\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7fd52bb53990>"]},"metadata":{},"execution_count":31}]},{"cell_type":"code","metadata":{"id":"B1U7LqpKid0r","colab":{"base_uri":"https://localhost:8080/"},"outputId":"7656bfac-ff40-47cf-af05-49c2c5fc024c","executionInfo":{"status":"ok","timestamp":1658603636248,"user_tz":300,"elapsed":284,"user":{"displayName":"Hector Alejandro Fernandez","userId":"11581287658742360806"}}},"source":["# Check the results of the insurance model\n","insurance_model.evaluate(X_test, y_test)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["9/9 [==============================] - 0s 2ms/step - loss: 3171.2974 - mae: 3171.2974\n"]},{"output_type":"execute_result","data":{"text/plain":["[3171.29736328125, 3171.29736328125]"]},"metadata":{},"execution_count":32}]},{"cell_type":"markdown","metadata":{"id":"H9doNDToqDru"},"source":["Our model didn't perform very well, let's try a bigger model.\n","\n","We'll try 3 things:\n","- Increasing the number of layers (2 -> 3).\n","- Increasing the number of units in each layer (except for the output layer).\n","- Changing the optimizer (from SGD to Adam).\n","\n","Everything else will stay the same."]},{"cell_type":"code","metadata":{"id":"W59EqfqYimnR"},"source":["# Set random seed\n","tf.random.set_seed(42)\n","\n","# Add an extra layer and increase number of units\n","insurance_model_2 = tf.keras.Sequential([\n","  tf.keras.layers.Dense(100), # 100 units\n","  tf.keras.layers.Dense(10), # 10 units\n","  tf.keras.layers.Dense(1) # 1 unit (important for output layer)\n","])\n","\n","# Compile the model\n","insurance_model_2.compile(loss=tf.keras.losses.mae,\n","                          optimizer=tf.keras.optimizers.Adam(learning_rate=0.1), # Adam works but SGD doesn't \n","                          metrics=['mae'])\n","\n","# Fit the model and save the history (we can plot this)\n","history = insurance_model_2.fit(X_train, y_train, epochs=100, verbose=0)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"k9IbYWnOqmoT","colab":{"base_uri":"https://localhost:8080/"},"outputId":"74114115-e332-4fc8-e88c-132285699cfa","executionInfo":{"status":"ok","timestamp":1658603889843,"user_tz":300,"elapsed":275,"user":{"displayName":"Hector Alejandro Fernandez","userId":"11581287658742360806"}}},"source":["# Evaluate our larger model\n","insurance_model_2.evaluate(X_test, y_test)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["9/9 [==============================] - 0s 2ms/step - loss: 3424.9792 - mae: 3424.9792\n"]},{"output_type":"execute_result","data":{"text/plain":["[3424.979248046875, 3424.979248046875]"]},"metadata":{},"execution_count":36}]},{"cell_type":"markdown","metadata":{"id":"o9Rf3NosqriS"},"source":["Much better! Using a larger model and the Adam optimizer results in almost half the error as the previous model.\n","\n","> ðŸ”‘ **Note:** For many problems, the [Adam optimizer](https://www.tensorflow.org/api_docs/python/tf/keras/optimizers/Adam) is a great starting choice. See Andrei Karpathy's \"Adam is safe\" point from [*A Recipe for Training Neural Networks*](http://karpathy.github.io/2019/04/25/recipe/) for more. \n","\n","Let's check out the loss curves of our model, we should see a downward trend."]},{"cell_type":"code","metadata":{"id":"9SE55ANojcF_","colab":{"base_uri":"https://localhost:8080/","height":279},"outputId":"23ef94b0-6f06-43a3-cc57-166d345d881b","executionInfo":{"status":"ok","timestamp":1658603958800,"user_tz":300,"elapsed":332,"user":{"displayName":"Hector Alejandro Fernandez","userId":"11581287658742360806"}}},"source":["# Plot history (also known as a loss curve)\n","pd.DataFrame(history.history).plot()\n","plt.ylabel(\"loss\")\n","plt.xlabel(\"epochs\");"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"ckHqtn0srQ5q"},"source":["From this, it looks like our model's loss (and MAE) were both still decreasing (in our case, MAE and loss are the same, hence the lines in the plot overlap eachother).\n","\n","What this tells us is the loss might go down if we try training it for longer.\n","\n","> ðŸ¤” **Question:** How long should you train for? \n","\n","> It depends on what problem you're working on. Sometimes training won't take very long, other times it'll take longer than you expect. A common method is to set your model training for a very long time (e.g. 1000's of epochs) but set it up with an [EarlyStopping callback](https://www.tensorflow.org/api_docs/python/tf/keras/callbacks/EarlyStopping) so it stops automatically when it stops improving. We'll see this in another module.\n","\n","Let's train the same model as above for a little longer. We can do this but calling fit on it again."]},{"cell_type":"code","metadata":{"id":"Ucs62jV8jl6N"},"source":["# Try training for a little longer (100 more epochs)\n","history_2 = insurance_model_2.fit(X_train, y_train, epochs=100, verbose=0)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"L2FZA1z1sxxs"},"source":["How did the extra training go?"]},{"cell_type":"code","metadata":{"id":"cxtiYB3qs0PZ","colab":{"base_uri":"https://localhost:8080/"},"outputId":"6e93c68a-dc5f-4739-8630-7560fc72c375","executionInfo":{"status":"ok","timestamp":1658604775000,"user_tz":300,"elapsed":128,"user":{"displayName":"Hector Alejandro Fernandez","userId":"11581287658742360806"}}},"source":["# Evaluate the model trained for 200 total epochs\n","insurance_model_2_loss, insurance_model_2_mae = insurance_model_2.evaluate(X_test, y_test)\n","insurance_model_2_loss, insurance_model_2_mae"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["9/9 [==============================] - 0s 2ms/step - loss: 3178.8936 - mae: 3178.8936\n"]},{"output_type":"execute_result","data":{"text/plain":["(3178.8935546875, 3178.8935546875)"]},"metadata":{},"execution_count":39}]},{"cell_type":"markdown","metadata":{"id":"MzUySYEOs-O_"},"source":["Boom! Training for an extra 100 epochs we see about a 10% decrease in error.\n","\n","How does the visual look?"]},{"cell_type":"code","metadata":{"id":"BtYKSLeQjuzL","colab":{"base_uri":"https://localhost:8080/","height":279},"outputId":"4602ba8b-851a-4db6-ba0f-d33d252b7072","executionInfo":{"status":"ok","timestamp":1658604855202,"user_tz":300,"elapsed":348,"user":{"displayName":"Hector Alejandro Fernandez","userId":"11581287658742360806"}}},"source":["# Plot the model trained for 200 total epochs loss curves\n","pd.DataFrame(history_2.history).plot()\n","plt.ylabel(\"loss\")\n","plt.xlabel(\"epochs\"); # note: epochs will only show 100 since we overrid the history variable"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"HS8xYkvIuVZZ"},"source":["## Preprocessing data (normalization and standardization)\n","\n","A common practice when working with neural networks is to make sure all of the data you pass to them is in the range 0 to 1.\n","\n","This practice is called **normalization** (scaling all values from their original range to, e.g. between 0 and 100,000 to be between 0 and 1).\n","\n","There is another process call **standardization** which converts all of your data to unit variance and 0 mean.\n","\n","These two practices are often part of a preprocessing pipeline (a series of functions to prepare your data for use with neural networks).\n","\n","Knowing this, some of the major steps you'll take to preprocess your data for a neural network include:\n","* Turning all of your data to numbers (a neural network can't handle strings).\n","* Making sure your data is in the right shape (verifying input and output shapes).\n","* [**Feature scaling**](https://scikit-learn.org/stable/modules/preprocessing.html#preprocessing-scaler):\n","    * Normalizing data (making sure all values are between 0 and 1). This is done by subtracting the minimum value then dividing by the maximum value minus the minmum. This is also referred to as min-max scaling.\n","    * Standardization (making sure all values have a mean of 0 and a variance of 1). This is done by substracting the mean value from the target feature and then dividing it by the standard deviation.\n","    * Which one should you use?\n","      * **With neural networks you'll tend to favour normalization** as they tend to prefer values between 0 and 1 (you'll see this espcially with image processing), however, you'll often find a neural network can perform pretty well with minimal feature scaling.\n","\n","> ðŸ“– **Resource:** For more on preprocessing data, I'd recommend reading the following resources:\n","* [Scikit-Learn's documentation on preprocessing data](https://scikit-learn.org/stable/modules/preprocessing.html#preprocessing-data).\n","* [Scale, Standardize or Normalize with Scikit-Learn by Jeff Hale](https://towardsdatascience.com/scale-standardize-or-normalize-with-scikit-learn-6ccc7d176a02).\n","\n","We've already turned our data into numbers using `get_dummies()`, let's see how we'd normalize it as well."]},{"cell_type":"code","metadata":{"id":"9v7P20A2d7H6"},"source":["import pandas as pd\n","import matplotlib.pyplot as plt\n","import tensorflow as tf\n","\n","# Read in the insurance dataset\n","insurance = pd.read_csv(\"https://raw.githubusercontent.com/stedy/Machine-Learning-with-R-datasets/master/insurance.csv\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"vir8UAIwlUOo","colab":{"base_uri":"https://localhost:8080/","height":206},"outputId":"6ddd9e6b-6865-4243-9b67-f4b84209539c","executionInfo":{"status":"ok","timestamp":1658604917070,"user_tz":300,"elapsed":150,"user":{"displayName":"Hector Alejandro Fernandez","userId":"11581287658742360806"}}},"source":["# Check out the data\n","insurance.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   age     sex     bmi  children smoker     region      charges\n","0   19  female  27.900         0    yes  southwest  16884.92400\n","1   18    male  33.770         1     no  southeast   1725.55230\n","2   28    male  33.000         3     no  southeast   4449.46200\n","3   33    male  22.705         0     no  northwest  21984.47061\n","4   32    male  28.880         0     no  northwest   3866.85520"],"text/html":["\n","  <div id=\"df-38e361dd-7650-42df-820c-c6fbbc5fbb1c\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>age</th>\n","      <th>sex</th>\n","      <th>bmi</th>\n","      <th>children</th>\n","      <th>smoker</th>\n","      <th>region</th>\n","      <th>charges</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>19</td>\n","      <td>female</td>\n","      <td>27.900</td>\n","      <td>0</td>\n","      <td>yes</td>\n","      <td>southwest</td>\n","      <td>16884.92400</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>18</td>\n","      <td>male</td>\n","      <td>33.770</td>\n","      <td>1</td>\n","      <td>no</td>\n","      <td>southeast</td>\n","      <td>1725.55230</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>28</td>\n","      <td>male</td>\n","      <td>33.000</td>\n","      <td>3</td>\n","      <td>no</td>\n","      <td>southeast</td>\n","      <td>4449.46200</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>33</td>\n","      <td>male</td>\n","      <td>22.705</td>\n","      <td>0</td>\n","      <td>no</td>\n","      <td>northwest</td>\n","      <td>21984.47061</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>32</td>\n","      <td>male</td>\n","      <td>28.880</td>\n","      <td>0</td>\n","      <td>no</td>\n","      <td>northwest</td>\n","      <td>3866.85520</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-38e361dd-7650-42df-820c-c6fbbc5fbb1c')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-38e361dd-7650-42df-820c-c6fbbc5fbb1c button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-38e361dd-7650-42df-820c-c6fbbc5fbb1c');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":43}]},{"cell_type":"markdown","metadata":{"id":"SHMQiNosg3J3"},"source":["Now, just as before, we need to transform the non-numerical columns into numbers and this time we'll also be normalizing the numerical columns with different ranges (to make sure they're all between 0 and 1).\n","\n","To do this, we're going to use a few classes from Scikit-Learn:\n","* [`make_column_transformer`](https://scikit-learn.org/stable/modules/generated/sklearn.compose.make_column_transformer.html) - build a multi-step data preprocessing function for the folllowing transformations:\n","  * [`MinMaxScaler`](https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.MinMaxScaler.html) - make sure all numerical columns are normalized (between 0 and 1).\n","  * [`OneHotEncoder`](https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.OneHotEncoder.html) - one hot encode the non-numerical columns.\n","\n","Let's see them in action."]},{"cell_type":"code","metadata":{"id":"-x9JwbV0hqWh"},"source":["from sklearn.compose import make_column_transformer\n","from sklearn.preprocessing import MinMaxScaler, OneHotEncoder\n","\n","# Create column transformer (this will help us normalize/preprocess our data)\n","ct = make_column_transformer(\n","    (MinMaxScaler(), [\"age\", \"bmi\", \"children\"]), # get all values between 0 and 1\n","    (OneHotEncoder(handle_unknown=\"ignore\"), [\"sex\", \"smoker\", \"region\"])\n",")\n","\n","# Create X & y\n","X = insurance.drop(\"charges\", axis=1)\n","y = insurance[\"charges\"]\n","\n","# Build our train and test sets (use random state to ensure same split as before)\n","X_train, X_test, y_train, y_test = train_test_split(X, \n","                                                    y, \n","                                                    test_size=0.2, \n","                                                    random_state=42)\n","\n","# Fit column transformer on the training data only (doing so on test data would result in data leakage)\n","ct.fit(X_train)\n","\n","# Transform training and test data with normalization (MinMaxScalar) and one hot encoding (OneHotEncoder)\n","X_train_normal = ct.transform(X_train)\n","X_test_normal = ct.transform(X_test)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Tz58y3nPiBJ-"},"source":["Now we've normalized it and one-hot encoding it, what does our data look like now?"]},{"cell_type":"code","metadata":{"id":"VODt2YiziK45","colab":{"base_uri":"https://localhost:8080/"},"outputId":"7e49af9c-1fa1-406d-d797-0f827e6e4ab5","executionInfo":{"status":"ok","timestamp":1658605088088,"user_tz":300,"elapsed":167,"user":{"displayName":"Hector Alejandro Fernandez","userId":"11581287658742360806"}}},"source":["# Non-normalized and non-one-hot encoded data example\n","X_train.loc[0]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["age                19\n","sex            female\n","bmi              27.9\n","children            0\n","smoker            yes\n","region      southwest\n","Name: 0, dtype: object"]},"metadata":{},"execution_count":45}]},{"cell_type":"code","metadata":{"id":"mMYDXdwUnNVt","colab":{"base_uri":"https://localhost:8080/"},"outputId":"206aa764-11f8-4aff-f459-5cf40f90a5f0","executionInfo":{"status":"ok","timestamp":1658605109267,"user_tz":300,"elapsed":217,"user":{"displayName":"Hector Alejandro Fernandez","userId":"11581287658742360806"}}},"source":["# Normalized and one-hot encoded example\n","X_train_normal[0]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0.60869565, 0.10734463, 0.4       , 1.        , 0.        ,\n","       1.        , 0.        , 0.        , 1.        , 0.        ,\n","       0.        ])"]},"metadata":{},"execution_count":46}]},{"cell_type":"markdown","metadata":{"id":"9iI4KtfWib44"},"source":["How about the shapes?"]},{"cell_type":"code","metadata":{"id":"SFmxzqrWntj7","colab":{"base_uri":"https://localhost:8080/"},"outputId":"a486c8d6-eb8b-4888-9972-09fc968216d3","executionInfo":{"status":"ok","timestamp":1658605116050,"user_tz":300,"elapsed":158,"user":{"displayName":"Hector Alejandro Fernandez","userId":"11581287658742360806"}}},"source":["# Notice the normalized/one-hot encoded shape is larger because of the extra columns\n","X_train_normal.shape, X_train.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((1070, 11), (1070, 6))"]},"metadata":{},"execution_count":47}]},{"cell_type":"markdown","metadata":{"id":"MST951aYijTS"},"source":["Our data is normalized and numerical, let's model it.\n","\n","We'll use the same model as `insurance_model_2`."]},{"cell_type":"code","metadata":{"id":"TdHnIQqll83Y","colab":{"base_uri":"https://localhost:8080/"},"outputId":"60a5bb55-f027-4517-97ba-b76ae3e91076","executionInfo":{"status":"ok","timestamp":1658605689959,"user_tz":300,"elapsed":9171,"user":{"displayName":"Hector Alejandro Fernandez","userId":"11581287658742360806"}}},"source":["# Set random seed\n","tf.random.set_seed(42)\n","\n","# Build the model (3 layers, 100, 10, 1 units)\n","insurance_model_3 = tf.keras.Sequential([\n","  tf.keras.layers.Dense(100),\n","  tf.keras.layers.Dense(10),\n","  tf.keras.layers.Dense(1)\n","])\n","\n","# Compile the model\n","insurance_model_3.compile(loss=tf.keras.losses.mae,\n","                          optimizer=tf.keras.optimizers.Adam(),\n","                          metrics=['mae'])\n","\n","# Fit the model for 200 epochs (same as insurance_model_2)\n","insurance_model_3.fit(X_train_normal, y_train, epochs=200, verbose=0) "],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7fd52a6ab390>"]},"metadata":{},"execution_count":48}]},{"cell_type":"markdown","metadata":{"id":"-DjwktO6jW41"},"source":["Let's evaluate the model on normalized test set."]},{"cell_type":"code","metadata":{"id":"sBcXZu9AnZfP","colab":{"base_uri":"https://localhost:8080/"},"outputId":"b7e9b136-d1e4-4946-908f-a407357e53f3","executionInfo":{"status":"ok","timestamp":1658605784020,"user_tz":300,"elapsed":354,"user":{"displayName":"Hector Alejandro Fernandez","userId":"11581287658742360806"}}},"source":["# Evaulate 3rd model\n","insurance_model_3_loss, insurance_model_3_mae = insurance_model_3.evaluate(X_test_normal, y_test)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["9/9 [==============================] - 0s 2ms/step - loss: 3171.5771 - mae: 3171.5771\n"]}]},{"cell_type":"markdown","metadata":{"id":"ZlHro290jhtX"},"source":["And finally, let's compare the results from `insurance_model_2` (trained on non-normalized data) and `insurance_model_3` (trained on normalized data)."]},{"cell_type":"code","metadata":{"id":"ybZtnVlNjCJO","colab":{"base_uri":"https://localhost:8080/"},"outputId":"bcd3e112-f878-4f4a-ab11-a0883c3e6fb6","executionInfo":{"status":"ok","timestamp":1658605852871,"user_tz":300,"elapsed":149,"user":{"displayName":"Hector Alejandro Fernandez","userId":"11581287658742360806"}}},"source":["# Compare modelling results from non-normalized data and normalized data\n","insurance_model_2_mae, insurance_model_3_mae"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(3178.8935546875, 3171.5771484375)"]},"metadata":{},"execution_count":50}]},{"cell_type":"markdown","metadata":{"id":"gUttViY4jzi8"},"source":["From this we can see normalizing the data results in 10% less error using the same model than not normalizing the data.\n","\n","This is **one of the main benefits of normalization: faster convergence time** (a fancy way of saying, your model gets to better results faster).\n","\n","`insurance_model_2` may have eventually achieved the same results as `insurance_model_3` if we left it training for longer. \n","\n","Also, the results may change if we were to alter the architectures of the models, e.g. more hidden units per layer or more layers.\n","\n","But since our main goal as neural network practitioners is to decrease the time between experiments, anything that helps us get better results sooner is a plus."]},{"cell_type":"markdown","metadata":{"id":"NhIPO_KqocHP"},"source":["## ðŸ›  Exercises\n","\n","We've a covered a whole lot pretty quickly.\n","\n","So now it's time to have a **play around** with a few things and start to build up your intuition.\n","\n","I emphasise the words play around because that's very important. Try a few things out, run the code and see what happens.\n","\n","1. Create your own regression dataset (or make the one we created in \"Create data to view and fit\" bigger) and build fit a model to it.\n","2. Try building a neural network with 4 Dense layers and fitting it to your own regression dataset, how does it perform?\n","3. Try and improve the results we got on the insurance dataset, some things you might want to try include:\n","  * Building a larger model (how does one with 4 dense layers go?).\n","  * Increasing the number of units in each layer.\n","  * Lookup the documentation of [Adam](https://www.tensorflow.org/api_docs/python/tf/keras/optimizers/Adam) and find out what the first parameter is, what happens if you increase it by 10x?\n","  * What happens if you train for longer (say 300 epochs instead of 200)? \n","4. Import the [Boston pricing dataset](https://www.tensorflow.org/api_docs/python/tf/keras/datasets/boston_housing/load_data) from TensorFlow [`tf.keras.datasets`](https://www.tensorflow.org/api_docs/python/tf/keras/datasets) and model it.\n"]},{"cell_type":"markdown","metadata":{"id":"AyiHG2nubmu7"},"source":["## ðŸ“– Extra curriculum\n","\n","If you're looking for extra materials relating to this notebook, I'd check out the following:\n","\n","* [MIT introduction deep learning lecture 1](https://youtu.be/njKP3FqW3Sk) - gives a great overview of what's happening behind all of the code we're running.\n","* Reading: 1-hour of [Chapter 1 of Neural Networks and Deep Learning](http://neuralnetworksanddeeplearning.com/chap1.html) by Michael Nielson - a great in-depth and hands-on example of the intuition behind neural networks.\n","\n","To practice your regression modelling with TensorFlow, I'd also encourage you to look through [Lion Bridge's collection of datasets](https://lionbridge.ai/datasets/) or [Kaggle's datasets](https://www.kaggle.com/data), find a regression dataset which sparks your interest and try to model."]}]}