{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Multi-class classification example - ipynb","provenance":[],"authorship_tag":"ABX9TyP+t4KRfL1prDZlGuoM9jR7"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"2WLKnUi6fI6B"},"source":["## Working with a larger example (multiclass classification)\n","\n","We've seen a binary classification example (predicting if a data point is part of a red circle or blue circle) but what if you had multiple different classes of things?\n","\n","For example, say you were a fashion company and you wanted to build a neural network to predict whether a piece of clothing was a shoe, a shirt or a jacket (3 different options).\n","\n","When you have more than two classes as an option, this is known as **multiclass classification**.\n","\n","The good news is, the things we've learned so far (with a few tweaks) can be applied to multiclass classification problems as well.\n","\n","Let's see it in action.\n","\n","To start, we'll need some data. The good thing for us is TensorFlow has a multiclass classication dataset known as [Fashion MNIST built-in](https://github.com/zalandoresearch/fashion-mnist). Meaning we can get started straight away.\n","\n","We can import it using the [`tf.keras.datasets`](https://www.tensorflow.org/api_docs/python/tf/keras/datasets) module.\n","\n","> ðŸ“– **Resource:** The following multiclass classification problem has been adapted from the [TensorFlow classification guide](https://www.tensorflow.org/tutorials/keras/classification). A good exercise would be to once you've gone through the following example, replicate the TensorFlow guide."]},{"cell_type":"code","metadata":{"id":"zl50sxPTqpw4","colab":{"base_uri":"https://localhost:8080/"},"outputId":"543145ad-f10a-4014-bbd7-75df9b642f75","executionInfo":{"status":"ok","timestamp":1658873653740,"user_tz":300,"elapsed":8663,"user":{"displayName":"Hector Alejandro Fernandez","userId":"11581287658742360806"}}},"source":["#import libraries \n","import tensorflow as tf\n","from tensorflow.keras.datasets import fashion_mnist\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import pandas as pd \n","\n","# The data has already been sorted into training and test sets for us\n","(train_data, train_labels), (test_data, test_labels) = fashion_mnist.load_data()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-labels-idx1-ubyte.gz\n","32768/29515 [=================================] - 0s 0us/step\n","40960/29515 [=========================================] - 0s 0us/step\n","Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-images-idx3-ubyte.gz\n","26427392/26421880 [==============================] - 0s 0us/step\n","26435584/26421880 [==============================] - 0s 0us/step\n","Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-labels-idx1-ubyte.gz\n","16384/5148 [===============================================================================================] - 0s 0us/step\n","Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-images-idx3-ubyte.gz\n","4423680/4422102 [==============================] - 0s 0us/step\n","4431872/4422102 [==============================] - 0s 0us/step\n"]}]},{"cell_type":"markdown","metadata":{"id":"D6qJforMrCZy"},"source":["Now let's check out an example."]},{"cell_type":"code","metadata":{"id":"8PWdrQsyrBcy","colab":{"base_uri":"https://localhost:8080/"},"outputId":"7cecf1da-8513-41fb-ab08-2dd6a2521868","executionInfo":{"status":"ok","timestamp":1658873655000,"user_tz":300,"elapsed":146,"user":{"displayName":"Hector Alejandro Fernandez","userId":"11581287658742360806"}}},"source":["# Show the first training example\n","print(f\"Training sample:\\n{train_data[0]}\\n\") \n","print(f\"Training label: {train_labels[0]}\")"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Training sample:\n","[[  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n","    0   0   0   0   0   0   0   0   0   0]\n"," [  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n","    0   0   0   0   0   0   0   0   0   0]\n"," [  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n","    0   0   0   0   0   0   0   0   0   0]\n"," [  0   0   0   0   0   0   0   0   0   0   0   0   1   0   0  13  73   0\n","    0   1   4   0   0   0   0   1   1   0]\n"," [  0   0   0   0   0   0   0   0   0   0   0   0   3   0  36 136 127  62\n","   54   0   0   0   1   3   4   0   0   3]\n"," [  0   0   0   0   0   0   0   0   0   0   0   0   6   0 102 204 176 134\n","  144 123  23   0   0   0   0  12  10   0]\n"," [  0   0   0   0   0   0   0   0   0   0   0   0   0   0 155 236 207 178\n","  107 156 161 109  64  23  77 130  72  15]\n"," [  0   0   0   0   0   0   0   0   0   0   0   1   0  69 207 223 218 216\n","  216 163 127 121 122 146 141  88 172  66]\n"," [  0   0   0   0   0   0   0   0   0   1   1   1   0 200 232 232 233 229\n","  223 223 215 213 164 127 123 196 229   0]\n"," [  0   0   0   0   0   0   0   0   0   0   0   0   0 183 225 216 223 228\n","  235 227 224 222 224 221 223 245 173   0]\n"," [  0   0   0   0   0   0   0   0   0   0   0   0   0 193 228 218 213 198\n","  180 212 210 211 213 223 220 243 202   0]\n"," [  0   0   0   0   0   0   0   0   0   1   3   0  12 219 220 212 218 192\n","  169 227 208 218 224 212 226 197 209  52]\n"," [  0   0   0   0   0   0   0   0   0   0   6   0  99 244 222 220 218 203\n","  198 221 215 213 222 220 245 119 167  56]\n"," [  0   0   0   0   0   0   0   0   0   4   0   0  55 236 228 230 228 240\n","  232 213 218 223 234 217 217 209  92   0]\n"," [  0   0   1   4   6   7   2   0   0   0   0   0 237 226 217 223 222 219\n","  222 221 216 223 229 215 218 255  77   0]\n"," [  0   3   0   0   0   0   0   0   0  62 145 204 228 207 213 221 218 208\n","  211 218 224 223 219 215 224 244 159   0]\n"," [  0   0   0   0  18  44  82 107 189 228 220 222 217 226 200 205 211 230\n","  224 234 176 188 250 248 233 238 215   0]\n"," [  0  57 187 208 224 221 224 208 204 214 208 209 200 159 245 193 206 223\n","  255 255 221 234 221 211 220 232 246   0]\n"," [  3 202 228 224 221 211 211 214 205 205 205 220 240  80 150 255 229 221\n","  188 154 191 210 204 209 222 228 225   0]\n"," [ 98 233 198 210 222 229 229 234 249 220 194 215 217 241  65  73 106 117\n","  168 219 221 215 217 223 223 224 229  29]\n"," [ 75 204 212 204 193 205 211 225 216 185 197 206 198 213 240 195 227 245\n","  239 223 218 212 209 222 220 221 230  67]\n"," [ 48 203 183 194 213 197 185 190 194 192 202 214 219 221 220 236 225 216\n","  199 206 186 181 177 172 181 205 206 115]\n"," [  0 122 219 193 179 171 183 196 204 210 213 207 211 210 200 196 194 191\n","  195 191 198 192 176 156 167 177 210  92]\n"," [  0   0  74 189 212 191 175 172 175 181 185 188 189 188 193 198 204 209\n","  210 210 211 188 188 194 192 216 170   0]\n"," [  2   0   0   0  66 200 222 237 239 242 246 243 244 221 220 193 191 179\n","  182 182 181 176 166 168  99  58   0   0]\n"," [  0   0   0   0   0   0   0  40  61  44  72  41  35   0   0   0   0   0\n","    0   0   0   0   0   0   0   0   0   0]\n"," [  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n","    0   0   0   0   0   0   0   0   0   0]\n"," [  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n","    0   0   0   0   0   0   0   0   0   0]]\n","\n","Training label: 9\n"]}]},{"cell_type":"markdown","metadata":{"id":"MMqbRp8jrdtv"},"source":["Woah, we get a large list of numbers, followed (the data) by a single number (the class label).\n","\n","What about the shapes?"]},{"cell_type":"code","metadata":{"id":"gN5-jr6arj19","colab":{"base_uri":"https://localhost:8080/"},"outputId":"5701bf19-a3a0-4545-964a-ec8f78b6c21f","executionInfo":{"status":"ok","timestamp":1658873657306,"user_tz":300,"elapsed":192,"user":{"displayName":"Hector Alejandro Fernandez","userId":"11581287658742360806"}}},"source":["# Check the shape of our data\n","train_data.shape, train_labels.shape, test_data.shape, test_labels.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((60000, 28, 28), (60000,), (10000, 28, 28), (10000,))"]},"metadata":{},"execution_count":3}]},{"cell_type":"code","metadata":{"id":"wNfIOUUEsJRt","colab":{"base_uri":"https://localhost:8080/"},"outputId":"a5539494-0655-415f-b308-c7128f6f8b7b","executionInfo":{"status":"ok","timestamp":1658873658713,"user_tz":300,"elapsed":151,"user":{"displayName":"Hector Alejandro Fernandez","userId":"11581287658742360806"}}},"source":["# Check shape of a single example\n","train_data[0].shape, train_labels[0].shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((28, 28), ())"]},"metadata":{},"execution_count":4}]},{"cell_type":"markdown","metadata":{"id":"r2wW0cEfsAve"},"source":["Okay, 60,000 training examples each with shape (28, 28) and a label each as well as 10,000 test examples of shape (28, 28).\n","\n","But these are just numbers, let's visualize."]},{"cell_type":"code","metadata":{"id":"RmC2VsWOscKP","colab":{"base_uri":"https://localhost:8080/","height":265},"outputId":"3b510a6c-b1c5-4cde-91cc-8b5681b36694","executionInfo":{"status":"ok","timestamp":1658873659973,"user_tz":300,"elapsed":522,"user":{"displayName":"Hector Alejandro Fernandez","userId":"11581287658742360806"}}},"source":["# Plot a single example\n","plt.imshow(train_data[7]);"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAAPsAAAD4CAYAAAAq5pAIAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAUUElEQVR4nO3df2zc9XkH8Pdz57MvdhwSh2ASCBDSMIaYCJ3JNqAMRCkpnRSYOlY2VdmKGtSBBBqTxpimsoltiJUiplZopkQNU6FDopRUQlAadWJsHeCwND8poSGBJE6cxCRxnNi+H8/+8IEM+PM85u6+9z37835JkZ17/PF9/PU9/t7d830+H1FVENHMl0l7AkTUGEx2okgw2YkiwWQnigSTnSgSLY28s1Zp0zw6GnmXUSjPbQ/GsqdK5lgdHa33dD5CZuWDsUJH1hzbcni43tOZ8UYwjDEdlcliNSW7iKwE8AiALIDvqeoD1tfn0YHfkWtrucvkyKTHZ2pSLl+eumZFMDZ7+xFzbOmtX9d7Oh+R+cyFwdjA5fPMsaf3/qLe05nxXtUNwVjVT+NFJAvguwC+COAiALeIyEXVfj8iSlYtr9lXAHhbVXep6hiAHwJYVZ9pEVG91ZLsZwF4b8L/91Zu+wgRWSMifSLSV0Cyrw+JKCzxd+NVtVdVe1S1J4e2pO+OiAJqSfZ9ABZP+P/ZlduIqAnVkuyvA1gmIktEpBXAVwCsr8+0iKjeqi69qWpRRO4A8CLGS29rVXVb3WbWaOL83Svb9WpL9oKlZvyt2xaY8Re//C0zvjS36VPPqXHCcxvVgjny5N/Z8cu/91dm/Jy//x8zXpOMfY1ALY+XpNRUZ1fV5wE8X6e5EFGCeLksUSSY7ESRYLITRYLJThQJJjtRJJjsRJGQRq4uO0e6NLUW1wTropf/csyM3zrvNTPelWk14/0l+/u/V5wTjC3I2j3hW0YXmfEdI3b8mtk7zPiilqFgbH+x0xzbnT1hxs9tsSvHm8fCv/NvbPlTc+wZq940466U6vCv6gYc18FJ+7V5ZieKBJOdKBJMdqJIMNmJIsFkJ4oEk50oEjOn9OatDlvjz/mbG8Nlnn/qtlspXxmxl8+emz1pxstq/03OSzEYK8E+Louydlkv5xzX/SW7xDSi4Xin2C2sB0uzzbinMzMSjP12m13uvGabvZxi63V7qprTh6zjWsNjlaU3ImKyE8WCyU4UCSY7USSY7ESRYLITRYLJThSJhm7ZnKga6+iDX/s9M/7Qmd8Nxl44FW4xBYAc7HZGr95ccJa5Lmu4ZuvV2XcVw9s9A0AW9nHNif2zWeNHjRo84Le4Fpxz1clyLhhbP2z/3P9x4ZNmfNWf3G3G5zz5v2Y8jZ1/eWYnigSTnSgSTHaiSDDZiSLBZCeKBJOdKBJMdqJITKt+djGWDtZiuKd7Kl7cb297vHE03PfdbvSTA8D2sTPN+OLcETPe4Xz/gtHvnhH792vV6AG/Tp8kr8bvzc2Knyy3mWMzUjbjV+XNML50hd0PX3wn3A8vObvXXgvhx6LVz17TRTUishvAEIASgKKq9tTy/YgoOfW4gu4aVT1ch+9DRAnia3aiSNSa7ArgpyKyUUTWTPYFIrJGRPpEpK+A0RrvjoiqVevT+CtVdZ+InAHgJRF5U1VfnvgFqtoLoBcYf4OuxvsjoirVdGZX1X2VjwMAngWwoh6TIqL6qzrZRaRDRDo/+BzAFwBsrdfEiKi+anka3w3gWRlf/7oFwJOq+kJdZhVQSy29+LNzzPiOMXvt992FcK38xo6j5tjt9tLsKDh93famy7ZWtevFzayWOjoAjGi4nz3vrCHwbrHLjA+U9pvx/pX2VtcLHg3X2bVoz61aVSe7qu4CcEkd50JECWLpjSgSTHaiSDDZiSLBZCeKBJOdKBIzZylpxz8vfaam8XOz4QJY1lnq2SoBTYW3ZbNZgnI6VL020jR5pTXvuGQRLjt6v5O5GXsb7fmZWWb8/UvtMvECK5hQ2znP7ESRYLITRYLJThQJJjtRJJjsRJFgshNFgslOFIlo6uwHiqeZ8bmth8y4XZf1ti2220yHynbNtjNzyowPG8si5zN2u6RXqx5z2m+zzpLL1pbOtd63pyMTXgbtSGm2Oda6rgIA+kt2HX7d5x8z4/+I5WY8CTyzE0WCyU4UCSY7USSY7ESRYLITRYLJThQJJjtRJGZMnb38uUvN+GVtr5jxnUW77rogOxSMHSs7vcstdr34UHGOGc85WzZb1wBknaWkC2o/BGrtKS8Z8bJzrsk41yd4NX7r+gNv7G+1HjfjR8v2cfG2hE4Dz+xEkWCyE0WCyU4UCSY7USSY7ESRYLITRYLJThSJmVNnz9l/t/LO2u5evXhxS7g3elTtmqu3Nntn1u5X98a3Gj3j7rrwTg0/463N7tSrrfsfq3F5dKtXHnD6/J0tm4fL9uRGnOsTVraHHy8A8LAZTYZ7ZheRtSIyICJbJ9zWJSIvicjOysd5yU6TiGo1lafx3wew8mO33QNgg6ouA7Ch8n8iamJusqvqywAGP3bzKgDrKp+vA3BjnedFRHVW7Wv2blXtr3x+AEB36AtFZA2ANQCQR3uVd0dEtar53XhVVSD8Loyq9qpqj6r25NB8zQFEsag22Q+KyEIAqHwcqN+UiCgJ1Sb7egCrK5+vBvBcfaZDRElxX7OLyFMArgZwuojsBfBNAA8AeFpEbgWwB8DNSU5yKgZ67JcIszN23Ovbzkk4fsypyXpr1p+XO2zGj5fzZtzi/VxWvzng95x7ZfystW688729WrgXt3hrBHRnW834rlF7rf93i8fM+Nj1PcFY64t95thqucmuqrcEQtfWeS5ElCBeLksUCSY7USSY7ESRYLITRYLJThSJGdPi6nSZIif2cs7ekspDTnmtFhmnTdTb0nl+9kQw5m177G3pXHDGe22mJueQemXD+caWzADwZil8efY5Le+bY9vE2qLbbp8FgK6M/Xg6fkd4qerTXzSHVo1ndqJIMNmJIsFkJ4oEk50oEkx2okgw2YkiwWQnisSMqbPnwqXmqY13Wh6PlcN11+Nq11y9OnqrszWxx/r+WadWnSZvS2bv+oJ2sdtIrRbarqx9fcFbBfv6gVax53bU2ca7s23MjCeBZ3aiSDDZiSLBZCeKBJOdKBJMdqJIMNmJIsFkJ4rEjKmzr/6L5834ifKIGR8ud5nx+ZmTwdglrfaWy15PeEaS65VvZtZW0wAwWLJ7yr2FpLuMPv9OZwvvXaXZZvzMbLgfHQD2l+xrL/7z4h8HY9fLpeZYaHWPF57ZiSLBZCeKBJOdKBJMdqJIMNmJIsFkJ4oEk50oEjOmzv7HnVvN+KDTMm6tvQ7Y/c/PnjjfHLvIWaM86yyg7q2fPlN56wAcLdsP3/Nyg8FYe8au4XvHvM25RqDdWR/hmRPzw8Eq6+ge98wuImtFZEBEtk647T4R2Scimyr/bkhkdkRUN1N5Gv99ACsnuf1hVV1e+WdfvkZEqXOTXVVfBhB+PkRE00Itb9DdISKbK0/z54W+SETWiEifiPQVYO/NRUTJqTbZHwWwFMByAP0AHgp9oar2qmqPqvbkYDcHEFFyqkp2VT2oqiVVLQN4DMCK+k6LiOqtqmQXkYUT/nsTALvuRUSpc+vsIvIUgKsBnC4iewF8E8DVIrIc4zts7wZwW4Jz/FB2WbievbBlkzl246i9TveibLhfHbBrumPO3u5e33ZB7b+5/vhwv7y373yH2MfFu2/PiIbr2d7e8X6/e3j/dQD4jVy453yobH/vQ8UzzPiynL1m/XDZ/p3+QceRYKwX9nUb1XKTXVVvmeTmxxOYCxEliJfLEkWCyU4UCSY7USSY7ESRYLITRWJatbge+Hx31WNHnBLU3IyzZXMx3PJ4uNBpjl2e32PGvS2fS05pziqv1doe28zttUfLdultfym8fLi3vPf5rQNmvF3s43LIeby1id1imwSe2YkiwWQnigSTnSgSTHaiSDDZiSLBZCeKBJOdKBLTqs6e8fboNRxxtuDNtdqtnta2yhfN2meObYW9JPKQU/PNOcsSW62iXptozokPl2fVNN7iza3sbMp81GlxPVQKX//gjb2kzf6d5sX+nQ1rqxlPA8/sRJFgshNFgslOFAkmO1EkmOxEkWCyE0WCyU4UiWlVZ+9+4d1w8B/ssWXn71pB7Vq4tSSyVwcfNsYC/jUAebHrzdbP1p6xl8jOO7Vu6+cG/O2ma7kGwPu5PdbvpT1jb0XWmbEfDyedbZXLzhoEcK69SALP7ESRYLITRYLJThQJJjtRJJjsRJFgshNFgslOFIlpVWff++Vzqx7r9S8fLdt1zxVt4Xrzf4942z3b9+3VmzucmrC1rvxI2a6TH3XqvTnYc/PWlc8bixC01vi9O7OnzPih4pyq5gUAeWdd+BGnzu5tR92UdXYRWSwiPxeR7SKyTUTurNzeJSIvicjOysd5yU+XiKo1lafxRQB3q+pFAH4XwO0ichGAewBsUNVlADZU/k9ETcpNdlXtV9U3Kp8PAdgB4CwAqwCsq3zZOgA3JjVJIqrdp3rNLiLnAbgUwKsAulW1vxI6AGDSjdhEZA2ANQCQh/3alYiSM+V340VkNoBnANylqscnxlRVgck7IlS1V1V7VLUnB3sDQyJKzpSSXURyGE/0H6jqjyo3HxSRhZX4QgD2tpdElCr3abyICIDHAexQ1W9PCK0HsBrAA5WPzyUywwlarj1c9dihkr0k8mDZXvp3iRG76/7bzbHr7/sXM35axr7vd4p2iapglN6OOktBey2sXlnQK49ZrZ5jzm7Q8zN2aW2BU3q7oL0jGPvzdz9njr3xnP8y4zvG7HJrLVrOO8eMF3cbrd7W953C11wB4KsAtojIpspt92I8yZ8WkVsB7AFwc1UzIKKGcJNdVV8Bgn++r63vdIgoKbxcligSTHaiSDDZiSLBZCeKBJOdKBLTqsV1Vi68NPA7hRPm2MWtR8x4wW1JDOta+wszfvllf2nGv3PdE2b8/JZBM768LXxl4oZTdjF7vrPUtGfMOV9Ydfbj5bw5domzjfao02Z6d/9ng7GtvRebY3G/XWcvOD+3d/0CjO2o3735bHPkogerq7PzzE4UCSY7USSY7ESRYLITRYLJThQJJjtRJJjsRJGYVnV2q6q6JGdve7y9YG+rnKQLvvGaGf9XXJjYfWc6wj3dAJDpchYFzjhN52W71g2jFq4jI+bQhw7b10b4wss1d8G+NgL322Fvq2pv+e+B0nAwdub179l3/qAdDuGZnSgSTHaiSDDZiSLBZCeKBJOdKBJMdqJIMNmJIjGt6uynrTZ61v/PHntW9pgZz4m9he6oTqtD9aHycLieO5V4rJ4+cZoZvzxvr5+wbcy+7mO+sWX0ntfsfvYlcOrwATyzE0WCyU4UCSY7USSY7ESRYLITRYLJThQJJjtRJKayP/tiAE8A6MZ4S3mvqj4iIvcB+DqAQ5UvvVdVn09qogBQOjgQjN1w7R+ZY+/6yY/N+LLc+2b8ste/FowtxA5zbOIy4TXvJWuvhy9Z+++9Omuzu7x+d+u+S/be8Cg7cTF68Z2f697X/9CMb/79fzPjS3OHzPiXfnVTMLbkb5xe+ypN5UqRIoC7VfUNEekEsFFEXqrEHlbVbyUyMyKqq6nsz94PoL/y+ZCI7ABwVtITI6L6+lSv2UXkPACXAni1ctMdIrJZRNaKyKTrG4nIGhHpE5G+AuyleogoOVNOdhGZDeAZAHep6nEAjwJYCmA5xs/8D002TlV7VbVHVXtyCO9JRkTJmlKyi0gO44n+A1X9EQCo6kFVLalqGcBjAFYkN00iqpWb7CIiAB4HsENVvz3h9oUTvuwmAFvrPz0iqpepvBt/BYCvAtgiIpsqt90L4BYRWY7xctxuALclMsMpKu3YacbnZu2tib2lqJd37wvGDpojgexcu12ydNRuv3UZJSh1ylMa7rSc9qQlvG2yFuztoPNbZpnxE1fZB+5cJ7OOPbY4GJuD8GOtFlN5N/4VAJMVLBOtqRNRffEKOqJIMNmJIsFkJ4oEk50oEkx2okgw2YkiMT3XR56M1c4I4OuP3GnG84N2y+PsfeG6bAs2mmPLw6fMOCVE7eXBLflD9uPhQMluHT5azptxZ+XyRPDMThQJJjtRJJjsRJFgshNFgslOFAkmO1EkmOxEkZCalwr+NHcmcgjAngk3nQ7gcMMm8Ok069yadV4A51ates7tXFVdMFmgocn+iTsX6VPVntQmYGjWuTXrvADOrVqNmhufxhNFgslOFIm0k7035fu3NOvcmnVeAOdWrYbMLdXX7ETUOGmf2YmoQZjsRJFIJdlFZKWI/EpE3haRe9KYQ4iI7BaRLSKySUT6Up7LWhEZEJGtE27rEpGXRGRn5eOke+ylNLf7RGRf5dhtEpEbUprbYhH5uYhsF5FtInJn5fZUj50xr4Yct4a/ZheRLIC3AFwHYC+A1wHcoqrbGzqRABHZDaBHVVO/AENErgJwAsATqnpx5bYHAQyq6gOVP5TzVPWvm2Ru9wE4kfY23pXdihZO3GYcwI0A/gwpHjtjXjejAcctjTP7CgBvq+ouVR0D8EMAq1KYR9NT1ZcBDH7s5lUA1lU+X4fxB0vDBebWFFS1X1XfqHw+BOCDbcZTPXbGvBoijWQ/C8B7E/6/F82137sC+KmIbBSRNWlPZhLdqtpf+fwAgO40JzMJdxvvRvrYNuNNc+yq2f68VnyD7pOuVNXPAvgigNsrT1ebko6/Bmum2umUtvFulEm2Gf9Qmseu2u3Pa5VGsu8DMHFXu7MrtzUFVd1X+TgA4Fk031bUBz/YQbfycSDl+XyombbxnmybcTTBsUtz+/M0kv11AMtEZImItAL4CoD1KczjE0Sko/LGCUSkA8AX0HxbUa8HsLry+WoAz6U4l49olm28Q9uMI+Vjl/r256ra8H8AbsD4O/K/BvC3acwhMK/zAfyy8m9b2nMD8BTGn9YVMP7exq0A5gPYAGAngJ8B6Gqiuf07gC0ANmM8sRamNLcrMf4UfTOATZV/N6R97Ix5NeS48XJZokjwDTqiSDDZiSLBZCeKBJOdKBJMdqJIMNmJIsFkJ4rE/wO+SV6P/p1xkwAAAABJRU5ErkJggg==\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"sOqirdtfstdQ"},"source":["Hmm, but what about its label?"]},{"cell_type":"code","metadata":{"id":"hzTDEpaYsxga","colab":{"base_uri":"https://localhost:8080/"},"outputId":"33475477-602d-44ac-dcbf-658b7648ae25","executionInfo":{"status":"ok","timestamp":1658873661164,"user_tz":300,"elapsed":165,"user":{"displayName":"Hector Alejandro Fernandez","userId":"11581287658742360806"}}},"source":["# Check our samples label\n","train_labels[7]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2"]},"metadata":{},"execution_count":6}]},{"cell_type":"markdown","metadata":{"id":"ZHdVBrCUs10A"},"source":["It looks like our labels are in numerical form. And while this is fine for a neural network, you might want to have them in human readable form.\n","\n","Let's create a small list of the class names (we can find them on [the dataset's GitHub page](https://github.com/zalandoresearch/fashion-mnist#labels)).\n","\n","> ðŸ”‘ **Note:** Whilst this dataset has been prepared for us and ready to go, it's important to remember many datasets won't be ready to go like this one. Often you'll have to do a few preprocessing steps to have it ready to use with a neural network (we'll see more of this when we work with our own data later)."]},{"cell_type":"code","metadata":{"id":"uGOi32T8s1ai","colab":{"base_uri":"https://localhost:8080/"},"outputId":"13f18ed8-2c4d-4746-bd94-221d3cf55432","executionInfo":{"status":"ok","timestamp":1658873662724,"user_tz":300,"elapsed":196,"user":{"displayName":"Hector Alejandro Fernandez","userId":"11581287658742360806"}}},"source":["class_names = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat', \n","               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']\n","\n","# How many classes are there (this'll be our output shape)?\n","len(class_names)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["10"]},"metadata":{},"execution_count":7}]},{"cell_type":"markdown","metadata":{"id":"zOiwINQQtzys"},"source":["Now we have these, let's plot another example.\n","\n","> ðŸ¤” **Question:** Pay particular attention to what the data we're working with *looks* like. Is it only straight lines? Or does it have non-straight lines as well? Do you think if we wanted to find patterns in the photos of clothes (which are actually collections of pixels), will our model need non-linearities (non-straight lines) or not?"]},{"cell_type":"code","metadata":{"id":"_qD40id2tytn","colab":{"base_uri":"https://localhost:8080/","height":281},"outputId":"63e6fc4d-4724-4a7d-9343-976389d45f42","executionInfo":{"status":"ok","timestamp":1658873664497,"user_tz":300,"elapsed":449,"user":{"displayName":"Hector Alejandro Fernandez","userId":"11581287658742360806"}}},"source":["# Plot an example image and its label\n","index = 19\n","plt.imshow(train_data[index], cmap=plt.cm.binary) # change the colours to black & white\n","plt.title(class_names[train_labels[index]]);"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"Rtz9__w3s4JF","colab":{"base_uri":"https://localhost:8080/","height":427},"outputId":"8444fc26-36d3-4e81-b6b7-d3ff6bee97a4","executionInfo":{"status":"ok","timestamp":1658873667922,"user_tz":300,"elapsed":706,"user":{"displayName":"Hector Alejandro Fernandez","userId":"11581287658742360806"}}},"source":["# Plot multiple random images of fashion MNIST\n","import random\n","plt.figure(figsize=(7, 7))\n","for i in range(4):\n","  ax = plt.subplot(2, 2, i + 1)\n","  rand_index = random.choice(range(len(train_data)))\n","  plt.imshow(train_data[rand_index], cmap=plt.cm.binary)\n","  plt.title(class_names[train_labels[rand_index]])\n","  plt.axis(False)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 504x504 with 4 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"TLqZif3Rv0Aq"},"source":["Alright, let's build a model to figure out the relationship between the pixel values and their labels.\n","\n","Since this is a multiclass classification problem, we'll need to make a few changes to our architecture (inline with Table 1 above):\n","\n","* The **input shape** will have to deal with 28x28 tensors (the height and width of our images).\n","  * We're actually going to squash the input into a tensor (vector) of shape `(784)`.\n","* The **output shape** will have to be 10 because we need our model to predict for 10 different classes.\n","  * We'll also change the `activation` parameter of our output layer to be [`\"softmax\"`](https://www.tensorflow.org/api_docs/python/tf/keras/activations/softmax) instead of `'sigmoid'`. As we'll see the `\"softmax\"` activation function outputs a series of values between 0 & 1 (the same shape as **output shape**, which together add up to ~1. The index with the highest value is predicted by the model to be the most *likely* class.\n","* We'll need to change our loss function from a binary loss function to a multiclass loss function. \n","  * More specifically, since our labels are in integer form, we'll use [`tf.keras.losses.SparseCategoricalCrossentropy()`](https://www.tensorflow.org/versions/r2.0/api_docs/python/tf/keras/losses/SparseCategoricalCrossentropy), if our labels were one-hot encoded (e.g. they looked something like `[0, 0, 1, 0, 0...]`), we'd use [`tf.keras.losses.CategoricalCrossentropy()`](https://www.tensorflow.org/api_docs/python/tf/keras/losses/CategoricalCrossentropy).\n","* We'll also use the `validation_data` parameter when calling the `fit()` function. This will give us an idea of how the model performs on the test set during training.\n","\n","You ready? Let's go."]},{"cell_type":"code","metadata":{"id":"qUFHuzIpv30K","colab":{"base_uri":"https://localhost:8080/"},"outputId":"16500f37-01ed-46f6-adf3-8b13849e9fc0","executionInfo":{"status":"ok","timestamp":1658874406847,"user_tz":300,"elapsed":83108,"user":{"displayName":"Hector Alejandro Fernandez","userId":"11581287658742360806"}}},"source":["# Set random seed\n","tf.random.set_seed(42)\n","\n","# Create the model\n","model_11 = tf.keras.Sequential([\n","  tf.keras.layers.Flatten(input_shape=(28, 28)), # input layer (we had to reshape 28x28 to 784, the Flatten layer does this for us)\n","  tf.keras.layers.Dense(4, activation=\"relu\"),\n","  tf.keras.layers.Dense(4, activation=\"relu\"),\n","  tf.keras.layers.Dense(10, activation=\"softmax\") # output shape is 10, activation is softmax\n","])\n","\n","# Compile the model\n","model_11.compile(loss=tf.keras.losses.SparseCategoricalCrossentropy(), # different loss function for multiclass classifcation\n","                 optimizer=tf.keras.optimizers.Adam(),\n","                 metrics=[\"accuracy\"])\n","\n","# Fit the model\n","non_norm_history = model_11.fit(train_data,\n","                                train_labels,\n","                                epochs=10,\n","                                validation_data=(test_data, test_labels)) # see how the model performs on the test set during training"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10\n","1875/1875 [==============================] - 5s 2ms/step - loss: 2.1671 - accuracy: 0.1606 - val_loss: 1.7959 - val_accuracy: 0.2046\n","Epoch 2/10\n","1875/1875 [==============================] - 4s 2ms/step - loss: 1.7066 - accuracy: 0.2509 - val_loss: 1.6567 - val_accuracy: 0.2805\n","Epoch 3/10\n","1875/1875 [==============================] - 4s 2ms/step - loss: 1.6321 - accuracy: 0.2806 - val_loss: 1.6094 - val_accuracy: 0.2857\n","Epoch 4/10\n","1875/1875 [==============================] - 5s 3ms/step - loss: 1.6052 - accuracy: 0.2833 - val_loss: 1.6041 - val_accuracy: 0.2859\n","Epoch 5/10\n","1875/1875 [==============================] - 4s 2ms/step - loss: 1.5975 - accuracy: 0.2862 - val_loss: 1.6064 - val_accuracy: 0.2756\n","Epoch 6/10\n","1875/1875 [==============================] - 4s 2ms/step - loss: 1.5950 - accuracy: 0.2920 - val_loss: 1.5747 - val_accuracy: 0.2994\n","Epoch 7/10\n","1875/1875 [==============================] - 4s 2ms/step - loss: 1.5775 - accuracy: 0.3040 - val_loss: 1.6030 - val_accuracy: 0.3000\n","Epoch 8/10\n","1875/1875 [==============================] - 4s 2ms/step - loss: 1.5708 - accuracy: 0.3175 - val_loss: 1.5635 - val_accuracy: 0.3315\n","Epoch 9/10\n","1875/1875 [==============================] - 4s 2ms/step - loss: 1.5638 - accuracy: 0.3280 - val_loss: 1.5534 - val_accuracy: 0.3334\n","Epoch 10/10\n","1875/1875 [==============================] - 4s 2ms/step - loss: 1.5432 - accuracy: 0.3346 - val_loss: 1.5390 - val_accuracy: 0.3549\n"]}]},{"cell_type":"code","metadata":{"id":"3hzYWEgoVJ_p","colab":{"base_uri":"https://localhost:8080/"},"outputId":"044383ad-0712-4ad6-eadc-75859860b180","executionInfo":{"status":"ok","timestamp":1658874451836,"user_tz":300,"elapsed":297,"user":{"displayName":"Hector Alejandro Fernandez","userId":"11581287658742360806"}}},"source":["# Check the shapes of our model\n","# Note: the \"None\" in (None, 784) is for batch_size, we'll cover this in a later module\n","model_11.summary()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," flatten (Flatten)           (None, 784)               0         \n","                                                                 \n"," dense (Dense)               (None, 4)                 3140      \n","                                                                 \n"," dense_1 (Dense)             (None, 4)                 20        \n","                                                                 \n"," dense_2 (Dense)             (None, 10)                50        \n","                                                                 \n","=================================================================\n","Total params: 3,210\n","Trainable params: 3,210\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}]},{"cell_type":"markdown","metadata":{"id":"XRfkre59zSto"},"source":["Alright, our model gets to about ~35% accuracy after 10 epochs using a similar style model to what we used on our binary classification problem.\n","\n","Which is better than guessing (guessing with 10 classes would result in about 10% accuracy) but we can do better.\n","\n","Do you remember when we talked about neural networks preferring numbers between 0 and 1? (if not, treat this as a reminder)\n","\n","Well, right now, the data we have isn't between 0 and 1, in other words, it's not normalized (hence why we used the `non_norm_history` variable when calling `fit()`). It's pixel values are between 0 and 255.\n","\n","Let's see."]},{"cell_type":"code","metadata":{"id":"tGiweanwz82_","colab":{"base_uri":"https://localhost:8080/"},"outputId":"20f5b88f-d20b-41e0-943f-24541139571d","executionInfo":{"status":"ok","timestamp":1658875403598,"user_tz":300,"elapsed":123,"user":{"displayName":"Hector Alejandro Fernandez","userId":"11581287658742360806"}}},"source":["# Check the min and max values of the training data\n","train_data.min(), train_data.max()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(0.0, 1.0)"]},"metadata":{},"execution_count":27}]},{"cell_type":"markdown","metadata":{"id":"syB7LOk30H0_"},"source":["We can get these values between 0 and 1 by dividing the entire array by the maximum: `255.0` (dividing by a float also converts to a float).\n","\n","\n","Doing so will result in all of our data being between 0 and 1 (known as **scaling** or **normalization**)."]},{"cell_type":"code","metadata":{"id":"ABRKp5U8voV_","colab":{"base_uri":"https://localhost:8080/"},"outputId":"fc48a24f-7067-4fdd-e040-ae0b85dcb90c","executionInfo":{"status":"ok","timestamp":1658875405604,"user_tz":300,"elapsed":395,"user":{"displayName":"Hector Alejandro Fernandez","userId":"11581287658742360806"}}},"source":["# Divide train and test images by the maximum value (normalize it)\n","train_data = train_data / 255.0\n","test_data = test_data / 255.0\n","\n","# Check the min and max values of the training data\n","train_data.min(), train_data.max()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(0.0, 1.0)"]},"metadata":{},"execution_count":28}]},{"cell_type":"markdown","metadata":{"id":"LeYQEXOf06oo"},"source":["Beautiful! Now our data is between 0 and 1. Let's see what happens when we model it.\n","\n","We'll use the same model as before (`model_11`) except this time the data will be normalized."]},{"cell_type":"code","metadata":{"id":"z1QRy7y_K_87","colab":{"base_uri":"https://localhost:8080/"},"outputId":"3213791c-a7a9-4780-a9be-50659fe1a5d4","executionInfo":{"status":"ok","timestamp":1658875568498,"user_tz":300,"elapsed":82974,"user":{"displayName":"Hector Alejandro Fernandez","userId":"11581287658742360806"}}},"source":["# Set random seed\n","tf.random.set_seed(42)\n","\n","# Create the model\n","model_12 = tf.keras.Sequential([\n","  tf.keras.layers.Flatten(input_shape=(28, 28)), # input layer (we had to reshape 28x28 to 784)\n","  tf.keras.layers.Dense(4, activation=\"relu\"),\n","  tf.keras.layers.Dense(4, activation=\"relu\"),\n","  tf.keras.layers.Dense(10, activation=\"softmax\") # output shape is 10, activation is softmax\n","])\n","\n","# Compile the model\n","model_12.compile(loss=tf.keras.losses.SparseCategoricalCrossentropy(),\n","                 optimizer=tf.keras.optimizers.Adam(),\n","                 metrics=[\"accuracy\"])\n","\n","# Fit the model (to the normalized data)\n","norm_history = model_12.fit(train_data,\n","                            train_labels,\n","                            epochs=10,\n","                            validation_data=(test_data, test_labels))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10\n","1875/1875 [==============================] - 7s 3ms/step - loss: 1.0348 - accuracy: 0.6474 - val_loss: 0.6937 - val_accuracy: 0.7617\n","Epoch 2/10\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.6376 - accuracy: 0.7757 - val_loss: 0.6400 - val_accuracy: 0.7820\n","Epoch 3/10\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.5942 - accuracy: 0.7914 - val_loss: 0.6247 - val_accuracy: 0.7783\n","Epoch 4/10\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.5750 - accuracy: 0.7979 - val_loss: 0.6078 - val_accuracy: 0.7881\n","Epoch 5/10\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.5641 - accuracy: 0.8006 - val_loss: 0.6169 - val_accuracy: 0.7881\n","Epoch 6/10\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.5544 - accuracy: 0.8043 - val_loss: 0.5855 - val_accuracy: 0.7951\n","Epoch 7/10\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.5488 - accuracy: 0.8063 - val_loss: 0.6097 - val_accuracy: 0.7836\n","Epoch 8/10\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.5428 - accuracy: 0.8077 - val_loss: 0.5787 - val_accuracy: 0.7971\n","Epoch 9/10\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.5373 - accuracy: 0.8097 - val_loss: 0.5698 - val_accuracy: 0.7977\n","Epoch 10/10\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.5360 - accuracy: 0.8124 - val_loss: 0.5658 - val_accuracy: 0.8014\n"]}]},{"cell_type":"markdown","metadata":{"id":"C_I2KNJiMWZ8"},"source":["Woah, we used the exact same model as before but we with normalized data we're now seeing a much higher accuracy value!\n","\n","Let's plot each model's history (their loss curves)."]},{"cell_type":"code","metadata":{"id":"zmRcYU7xN1wQ","colab":{"base_uri":"https://localhost:8080/","height":545},"outputId":"981f8058-a517-4ea1-f8da-76e99ab108ad","executionInfo":{"status":"ok","timestamp":1658875574561,"user_tz":300,"elapsed":606,"user":{"displayName":"Hector Alejandro Fernandez","userId":"11581287658742360806"}}},"source":["# Plot non-normalized data loss curves\n","pd.DataFrame(non_norm_history.history).plot(title=\"Non-normalized Data\")\n","# Plot normalized data loss curves\n","pd.DataFrame(norm_history.history).plot(title=\"Normalized data\");"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"VKm8MsACOm4j"},"source":["Wow. From these two plots, we can see how much quicker our model with the normalized data (`model_12`) improved than the model with the non-normalized data (`model_11`).\n","\n","> ðŸ”‘ **Note:** The same model with even *slightly* different data can produce *dramatically* different results. So when you're comparing models, it's important to make sure you're comparing them on the same criteria (e.g. same architecture but different data or same data but different architecture).\n","\n","How about we find the ideal learning rate and see what happens?\n","\n","We'll use the same architecture we've been using."]},{"cell_type":"code","metadata":{"id":"LcR_wb4nPSb2","colab":{"base_uri":"https://localhost:8080/"},"outputId":"528483a8-751b-473d-934b-1e9518b2d11b","executionInfo":{"status":"ok","timestamp":1658875861481,"user_tz":300,"elapsed":202244,"user":{"displayName":"Hector Alejandro Fernandez","userId":"11581287658742360806"}}},"source":["# Set random seed\n","tf.random.set_seed(42)\n","\n","# Create the model\n","model_13 = tf.keras.Sequential([\n","  tf.keras.layers.Flatten(input_shape=(28, 28)), # input layer (we had to reshape 28x28 to 784)\n","  tf.keras.layers.Dense(4, activation=\"relu\"),\n","  tf.keras.layers.Dense(4, activation=\"relu\"),\n","  tf.keras.layers.Dense(10, activation=\"softmax\") # output shape is 10, activation is softmax\n","])\n","\n","# Compile the model\n","model_13.compile(loss=tf.keras.losses.SparseCategoricalCrossentropy(),\n","                 optimizer=tf.keras.optimizers.Adam(),\n","                 metrics=[\"accuracy\"])\n","\n","# Create the learning rate callback\n","lr_scheduler = tf.keras.callbacks.LearningRateScheduler(lambda epoch: 1e-3 * 10**(epoch/20))\n","\n","# Fit the model\n","find_lr_history = model_13.fit(train_data,\n","                               train_labels,\n","                               epochs=40, # model already doing pretty good with current LR, probably don't need 100 epochs\n","                               validation_data=(test_data, test_labels),\n","                               callbacks=[lr_scheduler])"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/40\n","1875/1875 [==============================] - 5s 3ms/step - loss: 1.0348 - accuracy: 0.6474 - val_loss: 0.6937 - val_accuracy: 0.7617 - lr: 0.0010\n","Epoch 2/40\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.6366 - accuracy: 0.7759 - val_loss: 0.6400 - val_accuracy: 0.7808 - lr: 0.0011\n","Epoch 3/40\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.5934 - accuracy: 0.7911 - val_loss: 0.6278 - val_accuracy: 0.7770 - lr: 0.0013\n","Epoch 4/40\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.5749 - accuracy: 0.7969 - val_loss: 0.6122 - val_accuracy: 0.7871 - lr: 0.0014\n","Epoch 5/40\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.5655 - accuracy: 0.7987 - val_loss: 0.6061 - val_accuracy: 0.7913 - lr: 0.0016\n","Epoch 6/40\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.5569 - accuracy: 0.8022 - val_loss: 0.5917 - val_accuracy: 0.7940 - lr: 0.0018\n","Epoch 7/40\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.5542 - accuracy: 0.8036 - val_loss: 0.5898 - val_accuracy: 0.7896 - lr: 0.0020\n","Epoch 8/40\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.5509 - accuracy: 0.8039 - val_loss: 0.5829 - val_accuracy: 0.7949 - lr: 0.0022\n","Epoch 9/40\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.5468 - accuracy: 0.8047 - val_loss: 0.6036 - val_accuracy: 0.7833 - lr: 0.0025\n","Epoch 10/40\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.5478 - accuracy: 0.8058 - val_loss: 0.5736 - val_accuracy: 0.7974 - lr: 0.0028\n","Epoch 11/40\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.5446 - accuracy: 0.8059 - val_loss: 0.5672 - val_accuracy: 0.8016 - lr: 0.0032\n","Epoch 12/40\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.5432 - accuracy: 0.8067 - val_loss: 0.5773 - val_accuracy: 0.7950 - lr: 0.0035\n","Epoch 13/40\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.5425 - accuracy: 0.8056 - val_loss: 0.5775 - val_accuracy: 0.7992 - lr: 0.0040\n","Epoch 14/40\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.5407 - accuracy: 0.8078 - val_loss: 0.5616 - val_accuracy: 0.8075 - lr: 0.0045\n","Epoch 15/40\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.5408 - accuracy: 0.8052 - val_loss: 0.5773 - val_accuracy: 0.8039 - lr: 0.0050\n","Epoch 16/40\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.5437 - accuracy: 0.8058 - val_loss: 0.5682 - val_accuracy: 0.8015 - lr: 0.0056\n","Epoch 17/40\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.5419 - accuracy: 0.8075 - val_loss: 0.5995 - val_accuracy: 0.7964 - lr: 0.0063\n","Epoch 18/40\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.5488 - accuracy: 0.8058 - val_loss: 0.5544 - val_accuracy: 0.8087 - lr: 0.0071\n","Epoch 19/40\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.5506 - accuracy: 0.8042 - val_loss: 0.6068 - val_accuracy: 0.7864 - lr: 0.0079\n","Epoch 20/40\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.5537 - accuracy: 0.8030 - val_loss: 0.5597 - val_accuracy: 0.8076 - lr: 0.0089\n","Epoch 21/40\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.5572 - accuracy: 0.8036 - val_loss: 0.5998 - val_accuracy: 0.7934 - lr: 0.0100\n","Epoch 22/40\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.5615 - accuracy: 0.8013 - val_loss: 0.5756 - val_accuracy: 0.8034 - lr: 0.0112\n","Epoch 23/40\n","1875/1875 [==============================] - 5s 3ms/step - loss: 0.5655 - accuracy: 0.8017 - val_loss: 0.6386 - val_accuracy: 0.7668 - lr: 0.0126\n","Epoch 24/40\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.5819 - accuracy: 0.7963 - val_loss: 0.6356 - val_accuracy: 0.7869 - lr: 0.0141\n","Epoch 25/40\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.5810 - accuracy: 0.7977 - val_loss: 0.6481 - val_accuracy: 0.7865 - lr: 0.0158\n","Epoch 26/40\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.5960 - accuracy: 0.7901 - val_loss: 0.6997 - val_accuracy: 0.7802 - lr: 0.0178\n","Epoch 27/40\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.6101 - accuracy: 0.7870 - val_loss: 0.6124 - val_accuracy: 0.7917 - lr: 0.0200\n","Epoch 28/40\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.6178 - accuracy: 0.7846 - val_loss: 0.6137 - val_accuracy: 0.7962 - lr: 0.0224\n","Epoch 29/40\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.6357 - accuracy: 0.7771 - val_loss: 0.6655 - val_accuracy: 0.7621 - lr: 0.0251\n","Epoch 30/40\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.6671 - accuracy: 0.7678 - val_loss: 0.7597 - val_accuracy: 0.7194 - lr: 0.0282\n","Epoch 31/40\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.6836 - accuracy: 0.7585 - val_loss: 0.6958 - val_accuracy: 0.7342 - lr: 0.0316\n","Epoch 32/40\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.7062 - accuracy: 0.7553 - val_loss: 0.7015 - val_accuracy: 0.7732 - lr: 0.0355\n","Epoch 33/40\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.7383 - accuracy: 0.7500 - val_loss: 0.7146 - val_accuracy: 0.7706 - lr: 0.0398\n","Epoch 34/40\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.8033 - accuracy: 0.7300 - val_loss: 0.8987 - val_accuracy: 0.6848 - lr: 0.0447\n","Epoch 35/40\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.8429 - accuracy: 0.7110 - val_loss: 0.8750 - val_accuracy: 0.7053 - lr: 0.0501\n","Epoch 36/40\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.8651 - accuracy: 0.7033 - val_loss: 0.8176 - val_accuracy: 0.6989 - lr: 0.0562\n","Epoch 37/40\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.9203 - accuracy: 0.6837 - val_loss: 0.7876 - val_accuracy: 0.7333 - lr: 0.0631\n","Epoch 38/40\n","1875/1875 [==============================] - 4s 2ms/step - loss: 1.2374 - accuracy: 0.5191 - val_loss: 1.3699 - val_accuracy: 0.4902 - lr: 0.0708\n","Epoch 39/40\n","1875/1875 [==============================] - 4s 2ms/step - loss: 1.1828 - accuracy: 0.5311 - val_loss: 1.1010 - val_accuracy: 0.5819 - lr: 0.0794\n","Epoch 40/40\n","1875/1875 [==============================] - 4s 2ms/step - loss: 1.6640 - accuracy: 0.3303 - val_loss: 1.8528 - val_accuracy: 0.2779 - lr: 0.0891\n"]}]},{"cell_type":"code","metadata":{"id":"Hi2YODTwQ1ie","colab":{"base_uri":"https://localhost:8080/","height":299},"outputId":"551da515-2955-4218-8e5e-d2e58999fd25","executionInfo":{"status":"ok","timestamp":1658876148164,"user_tz":300,"elapsed":791,"user":{"displayName":"Hector Alejandro Fernandez","userId":"11581287658742360806"}}},"source":["# function to Plot the learning rate decay curve\n","def lr_cruve_plot(model, model_history):\n","  lrs = 1e-3 * (10**(np.arange(40)/20))\n","  plt.semilogx(lrs, find_lr_history.history[\"loss\"]) # want the x-axis to be log-scale\n","  plt.xlabel(\"Learning rate\")\n","  plt.ylabel(\"Loss\")\n","  plt.title(model + \" learning rate curve\");\n","\n","# Plot the learning rate decay curve\n","lr_cruve_plot(\"model_13\", find_lr_history)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"GqtOjggqWcfS"},"source":["In this case, it looks like somewhere close to the default learning rate of the [Adam optimizer](https://www.tensorflow.org/api_docs/python/tf/keras/optimizers/Adam) (`0.001`) is the ideal learning rate.\n","\n","Let's refit a model using the ideal learning rate."]},{"cell_type":"code","metadata":{"id":"i9KFhAwKXjWd","colab":{"base_uri":"https://localhost:8080/"},"outputId":"465ff324-8810-4ffe-8651-f4341721103f","executionInfo":{"status":"ok","timestamp":1658876325938,"user_tz":300,"elapsed":82645,"user":{"displayName":"Hector Alejandro Fernandez","userId":"11581287658742360806"}}},"source":["# Set random seed\n","tf.random.set_seed(42)\n","\n","# Create the model\n","model_14 = tf.keras.Sequential([\n","  tf.keras.layers.Flatten(input_shape=(28, 28)), # input layer (we had to reshape 28x28 to 784)\n","  tf.keras.layers.Dense(4, activation=\"relu\"),\n","  tf.keras.layers.Dense(4, activation=\"relu\"),\n","  tf.keras.layers.Dense(10, activation=\"softmax\") # output shape is 10, activation is softmax\n","])\n","\n","# Compile the model\n","model_14.compile(loss=tf.keras.losses.SparseCategoricalCrossentropy(),\n","                 optimizer=tf.keras.optimizers.Adam(lr=0.001), # ideal learning rate (same as default)\n","                 metrics=[\"accuracy\"])\n","\n","# Fit the model\n","history = model_14.fit(train_data,\n","                       train_labels,\n","                       epochs=20,\n","                       validation_data=(test_data, test_labels))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/20\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/keras/optimizer_v2/adam.py:105: UserWarning: The `lr` argument is deprecated, use `learning_rate` instead.\n","  super(Adam, self).__init__(name, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["1875/1875 [==============================] - 5s 2ms/step - loss: 1.0348 - accuracy: 0.6474 - val_loss: 0.6937 - val_accuracy: 0.7617\n","Epoch 2/20\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.6376 - accuracy: 0.7757 - val_loss: 0.6400 - val_accuracy: 0.7820\n","Epoch 3/20\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.5942 - accuracy: 0.7914 - val_loss: 0.6247 - val_accuracy: 0.7783\n","Epoch 4/20\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.5750 - accuracy: 0.7979 - val_loss: 0.6078 - val_accuracy: 0.7881\n","Epoch 5/20\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.5641 - accuracy: 0.8006 - val_loss: 0.6169 - val_accuracy: 0.7881\n","Epoch 6/20\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.5544 - accuracy: 0.8043 - val_loss: 0.5855 - val_accuracy: 0.7951\n","Epoch 7/20\n","1875/1875 [==============================] - 5s 3ms/step - loss: 0.5488 - accuracy: 0.8063 - val_loss: 0.6097 - val_accuracy: 0.7836\n","Epoch 8/20\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.5428 - accuracy: 0.8077 - val_loss: 0.5787 - val_accuracy: 0.7971\n","Epoch 9/20\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.5373 - accuracy: 0.8097 - val_loss: 0.5698 - val_accuracy: 0.7977\n","Epoch 10/20\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.5360 - accuracy: 0.8124 - val_loss: 0.5658 - val_accuracy: 0.8014\n","Epoch 11/20\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.5311 - accuracy: 0.8130 - val_loss: 0.5714 - val_accuracy: 0.8002\n","Epoch 12/20\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.5284 - accuracy: 0.8132 - val_loss: 0.5626 - val_accuracy: 0.8027\n","Epoch 13/20\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.5271 - accuracy: 0.8138 - val_loss: 0.5619 - val_accuracy: 0.8041\n","Epoch 14/20\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.5249 - accuracy: 0.8143 - val_loss: 0.5718 - val_accuracy: 0.7991\n","Epoch 15/20\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.5231 - accuracy: 0.8148 - val_loss: 0.5706 - val_accuracy: 0.8024\n","Epoch 16/20\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.5203 - accuracy: 0.8162 - val_loss: 0.5731 - val_accuracy: 0.8023\n","Epoch 17/20\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.5191 - accuracy: 0.8176 - val_loss: 0.5594 - val_accuracy: 0.8030\n","Epoch 18/20\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.5176 - accuracy: 0.8157 - val_loss: 0.5582 - val_accuracy: 0.8053\n","Epoch 19/20\n","1875/1875 [==============================] - 5s 3ms/step - loss: 0.5156 - accuracy: 0.8169 - val_loss: 0.5644 - val_accuracy: 0.8007\n","Epoch 20/20\n","1875/1875 [==============================] - 4s 2ms/step - loss: 0.5146 - accuracy: 0.8177 - val_loss: 0.5660 - val_accuracy: 0.8075\n"]}]},{"cell_type":"markdown","metadata":{"id":"1ODWXAlnWqri"},"source":["Now we've got a model trained with a close-to-ideal learning rate and performing pretty well, we've got a couple of options.\n","\n","We could:\n","* Evaluate its performance using other classification metrics (such as a [confusion matrix](https://scikit-learn.org/stable/auto_examples/model_selection/plot_confusion_matrix.html#sphx-glr-auto-examples-model-selection-plot-confusion-matrix-py) or [classification report](https://scikit-learn.org/stable/modules/generated/sklearn.metrics.classification_report.html)).\n","* Assess some of its predictions (through visualizations).\n","* Improve its accuracy (by training it for longer or changing the architecture).\n","* Save and export it for use in an application.\n","\n","Let's go through the first two options.\n","\n","First we'll create a classification matrix to visualize its predictions across the different classes."]},{"cell_type":"code","metadata":{"id":"jK4zA47sYVp5"},"source":["# Note: The following confusion matrix code is a remix of Scikit-Learn's \n","# plot_confusion_matrix function - https://scikit-learn.org/stable/modules/generated/sklearn.metrics.plot_confusion_matrix.html\n","# and Made with ML's introductory notebook - https://github.com/GokuMohandas/MadeWithML/blob/main/notebooks/08_Neural_Networks.ipynb\n","\n","# Our function needs a different name to sklearn's plot_confusion_matrix\n"," \n","def confusion_maxtrix_plot(model, y_true, y_preds, classes=None):\n","\n","  \"\"\"Makes a labelled confusion matrix comparing predictions and ground truth labels.\n","\n","  If classes is passed, confusion matrix will be labelled, if not, integer class values\n","  will be used.\n","\n","  Args:\n","    y_true: Array of truth labels (must be same shape as y_pred).\n","    y_pred: Array of predicted labels (must be same shape as y_true).\n","    classes: Array of class labels (e.g. string form). If `None`, integer labels are used.\n","    figsize: Size of output figure (default=(10, 10)).\n","    text_size: Size of output figure text (default=15).\n","  \n","  Returns:\n","    A labelled confusion matrix plot comparing y_true and y_pred.\n","\n","  Example usage:\n","    make_confusion_matrix(y_true=test_labels, # ground truth test labels\n","                          y_pred=y_preds, # predicted labels\n","                          classes=class_names, # array of class label names\n","                          figsize=(15, 15),\n","                          text_size=10)\n","  \"\"\"  \n","  \n","  import itertools\n","  from sklearn.metrics import confusion_matrix\n","\n","  figsize = (10, 10)\n","  text_size = 15\n","\n","  # Create the confusion matrix\n","  cm = confusion_matrix(y_true, tf.round(y_preds))\n","  cm_norm = cm.astype(\"float\") / cm.sum(axis=1)[:, np.newaxis] # normalize it\n","  n_classes = cm.shape[0]\n","\n","  # Let's prettify it\n","  fig, ax = plt.subplots(figsize=figsize)\n","  # Create a matrix plot\n","  cax = ax.matshow(cm, cmap=plt.cm.Blues) # https://matplotlib.org/3.2.0/api/_as_gen/matplotlib.axes.Axes.matshow.html\n","  fig.colorbar(cax)\n","\n","  # Are there a list of classes?\n","\n","  if classes:\n","    labels = classes\n","  else:\n","    labels = np.arange(cm.shape[0])\n","\n","  # Label the axes\n","  ax.set(title= model + \" Confusion Matrix\",\n","        xlabel=\"Predicted label\",\n","        ylabel=\"True label\",\n","        xticks=np.arange(n_classes),\n","        yticks=np.arange(n_classes),\n","        xticklabels=labels,\n","        yticklabels=labels)\n","\n","  # Set x-axis labels to bottom\n","  ax.xaxis.set_label_position(\"bottom\")\n","  ax.xaxis.tick_bottom()\n","  \n","  # Adjust label size\n","  #ax.xaxis.label.set_size(text_size)\n","  #ax.yaxis.label.set_size(text_size)\n","  #ax.title.set_size(text_size)\n","\n","  # Set threshold for different colors\n","  threshold = (cm.max() + cm.min()) / 2.\n","\n","  # Plot the text on each cell\n","  for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n","    plt.text(j, i, f\"{cm[i, j]} ({cm_norm[i, j]*100:.1f}%)\",\n","            horizontalalignment=\"center\",\n","            color=\"white\" if cm[i, j] > threshold else \"black\",\n","            size=7.3)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"HhxrXhrjbjja","colab":{"base_uri":"https://localhost:8080/"},"outputId":"4ad5c874-1782-4d5e-9f4a-78e4ff320081","executionInfo":{"status":"ok","timestamp":1658877365898,"user_tz":300,"elapsed":531,"user":{"displayName":"Hector Alejandro Fernandez","userId":"11581287658742360806"}}},"source":["# Make predictions with the most recent model\n","y_probs = model_14.predict(test_data) # \"probs\" is short for probabilities\n","\n","# View the first 5 predictions\n","y_probs[:5]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[8.56299753e-11, 3.53615629e-13, 2.66337556e-05, 4.63562024e-08,\n","        5.09498605e-05, 9.61192474e-02, 8.17780403e-08, 9.18688551e-02,\n","        4.06052778e-03, 8.07873666e-01],\n","       [3.42785552e-06, 1.28992649e-16, 9.59891498e-01, 2.05162564e-07,\n","        1.53292371e-02, 2.45320095e-13, 2.41428725e-02, 1.13834485e-28,\n","        6.32718089e-04, 4.47896404e-08],\n","       [6.10630595e-05, 9.96576726e-01, 4.38669758e-08, 3.34058981e-03,\n","        1.32494861e-05, 1.43831603e-21, 8.27906115e-06, 7.32374630e-18,\n","        5.48116041e-08, 4.92251402e-14],\n","       [7.50314357e-05, 9.90536869e-01, 4.25285322e-07, 9.22318175e-03,\n","        1.36231421e-04, 1.82760903e-18, 2.68082422e-05, 4.81248308e-14,\n","        1.45215904e-06, 2.22114601e-11],\n","       [7.21899569e-02, 1.54957536e-06, 2.55668938e-01, 1.03631355e-02,\n","        4.35413495e-02, 1.10693023e-13, 6.16930187e-01, 6.75438989e-23,\n","        1.30491622e-03, 1.21404065e-09]], dtype=float32)"]},"metadata":{},"execution_count":54}]},{"cell_type":"markdown","metadata":{"id":"eP5zslXbf5ZY"},"source":["Our model outputs a list of **prediction probabilities**, meaning, it outputs a number for how likely it thinks a particular class is to be the label.\n","\n","The higher the number in the prediction probabilities list, the more likely the model believes that is the right class.\n","\n","To find the highest value we can use the [`argmax()`](https://numpy.org/doc/stable/reference/generated/numpy.argmax.html) method."]},{"cell_type":"code","metadata":{"id":"hQvrJbbWf4Es","colab":{"base_uri":"https://localhost:8080/"},"outputId":"ddc710f4-5b67-4e1d-9266-7c22f89f6c71","executionInfo":{"status":"ok","timestamp":1658877367508,"user_tz":300,"elapsed":116,"user":{"displayName":"Hector Alejandro Fernandez","userId":"11581287658742360806"}}},"source":["# See the predicted class number and label for the first example\n","y_probs[0].argmax(), class_names[y_probs[0].argmax()]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(9, 'Ankle boot')"]},"metadata":{},"execution_count":55}]},{"cell_type":"markdown","metadata":{"id":"BFPgnBCghrTz"},"source":["Now let's do the same for all of the predictions."]},{"cell_type":"code","metadata":{"id":"ozUpeZU6g2An","colab":{"base_uri":"https://localhost:8080/"},"outputId":"dfcd8909-3264-4447-81fa-d17c3a4a5a3d","executionInfo":{"status":"ok","timestamp":1658877368977,"user_tz":300,"elapsed":126,"user":{"displayName":"Hector Alejandro Fernandez","userId":"11581287658742360806"}}},"source":["# Convert all of the predictions from probabilities to labels\n","y_preds = y_probs.argmax(axis=1)\n","\n","# View the first 10 prediction labels\n","y_preds[:10]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([9, 2, 1, 1, 6, 1, 4, 6, 5, 7])"]},"metadata":{},"execution_count":56}]},{"cell_type":"markdown","metadata":{"id":"47g1wNk6iYTd"},"source":["Wonderful, now we've got our model's predictions in label form, let's create a confusion matrix to view them against the truth labels."]},{"cell_type":"code","metadata":{"id":"FBMSVSRqcU_m","colab":{"base_uri":"https://localhost:8080/"},"outputId":"47d3c09d-2c87-4ffb-8450-4480f9c10eaf","executionInfo":{"status":"ok","timestamp":1658877370426,"user_tz":300,"elapsed":125,"user":{"displayName":"Hector Alejandro Fernandez","userId":"11581287658742360806"}}},"source":["# Check out the non-prettified confusion matrix\n","from sklearn.metrics import confusion_matrix\n","confusion_matrix(y_true=test_labels, \n","                 y_pred=y_preds)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[696,   8,  25,  87,   9,   5, 160,   0,  10,   0],\n","       [  2, 939,   2,  35,   9,   0,  13,   0,   0,   0],\n","       [ 19,   2, 656,  10, 188,   0, 110,   0,  15,   0],\n","       [ 39,  10,  10, 819,  55,   0,  47,   1,  19,   0],\n","       [  0,   0,  95,  23, 800,   0,  73,   0,   7,   2],\n","       [  0,   0,   1,   0,   0, 894,   0,  60,   7,  38],\n","       [106,   4, 158,  57, 159,   1, 499,   0,  16,   0],\n","       [  0,   0,   0,   0,   0,  31,   0, 936,   0,  33],\n","       [  4,   1,  38,  15,   8,  12,   9,   5, 906,   2],\n","       [  0,   0,   1,   0,   2,  15,   0,  51,   1, 930]])"]},"metadata":{},"execution_count":57}]},{"cell_type":"markdown","metadata":{"id":"ql-TQxuYiqPl"},"source":["That confusion matrix is hard to comprehend, let's make it prettier using the function we created before."]},{"cell_type":"code","metadata":{"id":"DLr6daZAbzRi","colab":{"base_uri":"https://localhost:8080/","height":580},"outputId":"8746d44f-fd4b-4849-acbf-0f2a5ca56bbf","executionInfo":{"status":"ok","timestamp":1658878310904,"user_tz":300,"elapsed":960,"user":{"displayName":"Hector Alejandro Fernandez","userId":"11581287658742360806"}}},"source":["# Make a prettier confusion matrix\n","confusion_maxtrix_plot(\"model_14\", test_labels, y_preds, class_names)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 720x720 with 2 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"tH3FhuGEjTu9"},"source":["That looks much better! (one of my favourites sights in the world is a confusion matrix with dark squares down the diagonal)\n","\n","Except the results aren't as good as they could be...\n","\n","It looks like our model is getting confused between the `Shirt` and `T-shirt/top` classes (e.g. predicting `Shirt` when it's actually a `T-shirt/top`).\n","\n","> ðŸ¤” **Question:** Does it make sense that our model is getting confused between the `Shirt` and `T-shirt/top` classes? Why do you think this might be? What's one way you could investigate?\n","\n","We've seen how our models predictions line up to the truth labels using a confusion matrix, but how about we visualize some?\n","\n","Let's create a function to plot a random image along with its prediction.\n","\n","> ðŸ”‘ **Note:** Often when working with images and other forms of visual data, it's a good idea to visualize as much as possible to develop a further understanding of the data and the outputs of your model."]},{"cell_type":"code","metadata":{"id":"2XIuAjgJri9e"},"source":["# Create a function for plotting a random image along with its prediction\n","def plot_random_image(model, images, true_labels, classes):\n","  \"\"\"Picks a random image, plots it and labels it with a predicted and truth label.\n","\n","  Args:\n","    model: a trained model (trained on data similar to what's in images).\n","    images: a set of random images (in tensor form).\n","    true_labels: array of ground truth labels for images.\n","    classes: array of class names for images.\n","  \n","  Returns:\n","    A plot of a random image from `images` with a predicted class label from `model`\n","    as well as the truth class label from `true_labels`.\n","  \"\"\" \n","  import random\n","\n","  # Setup random integer\n","  i = random.randint(0, len(images))\n","  \n","  # Create predictions and targets\n","  target_image = images[i]\n","  pred_probs = model.predict(target_image.reshape(1, 28, 28)) # have to reshape to get into right size for model\n","  pred_label = classes[pred_probs.argmax()]\n","  true_label = classes[true_labels[i]]\n","\n","  # Plot the target image\n","  plt.imshow(target_image, cmap=plt.cm.binary)\n","\n","  # Change the color of the titles depending on if the prediction is right or wrong\n","  if pred_label == true_label:\n","    color = \"green\"\n","  else:\n","    color = \"red\"\n","\n","  # Add xlabel information (prediction/true label)\n","  plt.xlabel(\"Pred: {} {:2.0f}% (True: {})\".format(pred_label,\n","                                                   100*tf.reduce_max(pred_probs),\n","                                                   true_label),\n","             color=color) # set the color to green or red"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"RAAIrpcEumyE","colab":{"base_uri":"https://localhost:8080/","height":235},"outputId":"c06099a9-02a8-4182-ebcd-90eaa3236e0a","executionInfo":{"status":"error","timestamp":1659108228047,"user_tz":300,"elapsed":186,"user":{"displayName":"Hector Alejandro Fernandez","userId":"11581287658742360806"}}},"source":["# Check out a random image as well as its prediction\n","plot_random_image(model=model_14, \n","                  images=test_data, \n","                  true_labels=test_labels, \n","                  classes=class_names)"],"execution_count":1,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-2d8efd852f25>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Check out a random image as well as its prediction\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m plot_random_image(model=model_14, \n\u001b[0m\u001b[1;32m      3\u001b[0m                   \u001b[0mimages\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtest_data\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m                   \u001b[0mtrue_labels\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtest_labels\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m                   classes=class_names)\n","\u001b[0;31mNameError\u001b[0m: name 'plot_random_image' is not defined"]}]},{"cell_type":"markdown","metadata":{"id":"FNebpPbCw52S"},"source":["After running the cell above a few times you'll start to get a visual understanding of the relationship between the model's predictions and the true labels.\n","\n","Did you figure out which predictions the model gets confused on?\n","\n","It seems to mix up classes which are similar, for example, `Sneaker` with `Ankle boot`.\n","\n","Looking at the images, you can see how this might be the case.\n","\n","The overall shape of a `Sneaker` and an `Ankle Boot` are similar.\n","\n","The overall shape might be one of the patterns the model has learned and so therefore when two images have a similar shape, their predictions get mixed up."]},{"cell_type":"markdown","metadata":{"id":"pOwM1rqhx6p3"},"source":["### What patterns is our model learning?\n","\n","We've been talking a lot about how a neural network finds patterns in numbers, but what exactly do these patterns look like?\n","\n","Let's crack open one of our models and find out.\n","\n","First, we'll get a list of layers in our most recent model (`model_14`) using the `layers` attribute."]},{"cell_type":"code","metadata":{"id":"kcwMsgFuySTi","colab":{"base_uri":"https://localhost:8080/"},"outputId":"8587952b-07dd-442f-8df3-58f25ad86ec0","executionInfo":{"status":"ok","timestamp":1658878935084,"user_tz":300,"elapsed":176,"user":{"displayName":"Hector Alejandro Fernandez","userId":"11581287658742360806"}}},"source":["# Find the layers of our most recent model\n","model_14.layers"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<keras.layers.core.flatten.Flatten at 0x7fde60c1a7d0>,\n"," <keras.layers.core.dense.Dense at 0x7fde5d1ff5d0>,\n"," <keras.layers.core.dense.Dense at 0x7fde5d105c90>,\n"," <keras.layers.core.dense.Dense at 0x7fde5d1f74d0>]"]},"metadata":{},"execution_count":104}]},{"cell_type":"markdown","metadata":{"id":"w9si0o-h4oO1"},"source":["We can access a target layer using indexing."]},{"cell_type":"code","metadata":{"id":"DXuQmsNX1mGR","colab":{"base_uri":"https://localhost:8080/"},"outputId":"adbf85eb-380d-4239-b5e4-0f5be3f77aab","executionInfo":{"status":"ok","timestamp":1658878974985,"user_tz":300,"elapsed":116,"user":{"displayName":"Hector Alejandro Fernandez","userId":"11581287658742360806"}}},"source":["# Extract a particular layer\n","model_14.layers[1]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<keras.layers.core.dense.Dense at 0x7fde5d1ff5d0>"]},"metadata":{},"execution_count":105}]},{"cell_type":"markdown","metadata":{"id":"W6Cftaib4uG-"},"source":["And we can find the patterns learned by a particular layer using the `get_weights()` method.\n","\n","The `get_weights()` method returns the **weights** (also known as a weights matrix) and biases (also known as a bias vector) of a particular layer."]},{"cell_type":"code","metadata":{"id":"WdmZy5xi1srE","colab":{"base_uri":"https://localhost:8080/"},"outputId":"f9629e61-80d9-4e02-ad48-138611864073","executionInfo":{"status":"ok","timestamp":1658878998667,"user_tz":300,"elapsed":135,"user":{"displayName":"Hector Alejandro Fernandez","userId":"11581287658742360806"}}},"source":["# Get the patterns of a layer in our network\n","weights, biases = model_14.layers[1].get_weights()\n","\n","# Shape = 1 weight matrix the size of our input data (28x28) per neuron (4)\n","weights, weights.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(array([[ 0.7150263 , -0.06077093, -0.99763095, -1.0484313 ],\n","        [ 0.2773212 , -0.471554  , -0.52916455,  0.02329255],\n","        [ 0.7752433 ,  0.5402759 , -1.128857  , -0.7426156 ],\n","        ...,\n","        [-0.3945342 ,  0.47628632, -0.2264153 ,  0.2550593 ],\n","        [-0.40515798,  0.61810046,  0.23928414, -0.50387603],\n","        [ 0.23884593,  0.11606961, -0.12131374,  0.04352392]],\n","       dtype=float32), (784, 4))"]},"metadata":{},"execution_count":106}]},{"cell_type":"markdown","metadata":{"id":"yCjuNSD73oG0"},"source":["The weights matrix is the same shape as the input data, which in our case is 784 (28x28 pixels). And there's a copy of the weights matrix for each neuron the in the selected layer (our selected layer has 4 neurons).\n","\n","Each value in the weights matrix corresponds to how a particular value in the input data influences the network's decisions.\n","\n","These values start out as random numbers (they're set by the [`kernel_initializer` parameter](https://www.tensorflow.org/api_docs/python/tf/keras/layers/Dense) when creating a layer, the default is [`\"glorot_uniform\"`](https://www.tensorflow.org/api_docs/python/tf/keras/initializers/GlorotUniform)) and are then updated to better representative values of the data (non-random) by the neural network during training.\n","\n","![neural network supervised learning weight updates](https://raw.githubusercontent.com/mrdbourke/tensorflow-deep-learning/main/images/02-fashion-mnist-learning.png)\n","*Example workflow of how a supervised neural network starts with random weights and updates them to better represent the data by looking at examples of ideal outputs.*\n","\n","Now let's check out the bias vector."]},{"cell_type":"code","metadata":{"id":"ndG-h2yz1z2_","colab":{"base_uri":"https://localhost:8080/"},"outputId":"48fd420b-4ce7-4969-fd70-69401ba87b28","executionInfo":{"status":"ok","timestamp":1658879277733,"user_tz":300,"elapsed":115,"user":{"displayName":"Hector Alejandro Fernandez","userId":"11581287658742360806"}}},"source":["# Shape = 1 bias per neuron (we use 4 neurons in the first layer)\n","biases, biases.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(array([ 2.4485964e-02, -6.1471871e-04, -2.7230152e-01,  8.1124878e-01],\n","       dtype=float32), (4,))"]},"metadata":{},"execution_count":107}]},{"cell_type":"markdown","metadata":{"id":"3JRQFh3U374U"},"source":["Every neuron has a bias vector. Each of these is paired with a weight matrix.\n","\n","The bias values get initialized as zeroes by default (using the [`bias_initializer` parameter](https://www.tensorflow.org/api_docs/python/tf/keras/layers/Dense)).\n","\n","The bias vector dictates how much the patterns within the corresponding weights matrix should influence the next layer."]},{"cell_type":"code","metadata":{"id":"_QCUb7GeSGYF","colab":{"base_uri":"https://localhost:8080/"},"outputId":"cbc139b8-9e5a-4916-defe-08a8552523ad","executionInfo":{"status":"ok","timestamp":1658879279649,"user_tz":300,"elapsed":290,"user":{"displayName":"Hector Alejandro Fernandez","userId":"11581287658742360806"}}},"source":["# Can now calculate the number of paramters in our model\n","model_14.summary()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_11\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," flatten_11 (Flatten)        (None, 784)               0         \n","                                                                 \n"," dense_33 (Dense)            (None, 4)                 3140      \n","                                                                 \n"," dense_34 (Dense)            (None, 4)                 20        \n","                                                                 \n"," dense_35 (Dense)            (None, 10)                50        \n","                                                                 \n","=================================================================\n","Total params: 3,210\n","Trainable params: 3,210\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}]},{"cell_type":"markdown","metadata":{"id":"trRRZLIRyLXe"},"source":["Now we've built a few deep learning models, it's a good time to point out the whole concept of inputs and outputs not only relates to a model as a whole but to *every* layer within a model.\n","\n","You might've already guessed this, but starting from the input layer, each subsequent layer's input is the output of the previous layer.\n","\n","We can see this clearly using the utility [`plot_model()`](https://www.tensorflow.org/api_docs/python/tf/keras/utils/plot_model)."]},{"cell_type":"code","metadata":{"id":"YJD0GqGl3NY0","colab":{"base_uri":"https://localhost:8080/","height":533},"outputId":"91f29b07-8fa0-4ce1-f48d-89ae627520b5","executionInfo":{"status":"ok","timestamp":1658879291444,"user_tz":300,"elapsed":614,"user":{"displayName":"Hector Alejandro Fernandez","userId":"11581287658742360806"}}},"source":["from tensorflow.keras.utils import plot_model\n","\n","# See the inputs and outputs of each layer\n","plot_model(model_14, show_shapes=True)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<IPython.core.display.Image object>"],"image/png":"\n"},"metadata":{},"execution_count":109}]},{"cell_type":"markdown","metadata":{"id":"OY5HO72ATJR4"},"source":["## How a model learns (in brief)\n","\n","Alright, we've trained a bunch of models, but we've never really discussed what's going on under the hood. So how exactly does a model learn?\n","\n","A model learns by updating and improving its weight matrices and biases values every epoch (in our case, when we call the `fit()` fucntion).\n","\n","It does so by comparing the patterns its learned between the data and labels to the actual labels.\n","\n","If the current patterns (weight matrices and bias values) don't result in a desirable decrease in the loss function (higher loss means worse predictions), the optimizer tries to steer the model to update its patterns in the right way (using the real labels as a reference).\n","\n","This process of using the real labels as a reference to improve the model's predictions is called [**backpropagation**](https://en.wikipedia.org/wiki/Backpropagation).\n","\n","In other words, data and labels pass through a model (**forward pass**) and it attempts to learn the relationship between the data and labels. \n","\n","And if this learned relationship isn't close to the actual relationship or it could be improved, the model does so by going back through itself (**backward pass**) and tweaking its weights matrices and bias values to better represent the data.\n","\n","If all of this sounds confusing (and it's fine if it does, the above is a very succinct description), check out the resources in the extra-curriculum section for more."]},{"cell_type":"markdown","metadata":{"id":"LXmMG6fcpoIp"},"source":["## Exercises ðŸ› \n","\n","1. Play with neural networks in the [TensorFlow Playground](https://playground.tensorflow.org/) for 10-minutes. Especially try different values of the learning, what happens when you decrease it? What happens when you increase it?\n","2. Replicate the model pictured in the [TensorFlow Playground diagram](https://playground.tensorflow.org/#activation=relu&batchSize=10&dataset=circle&regDataset=reg-plane&learningRate=0.001&regularizationRate=0&noise=0&networkShape=6,6,6,6,6&seed=0.51287&showTestData=false&discretize=false&percTrainData=50&x=true&y=true&xTimesY=false&xSquared=false&ySquared=false&cosX=false&sinX=false&cosY=false&sinY=false&collectStats=false&problem=classification&initZero=false&hideText=false&regularization_hide=true&discretize_hide=true&regularizationRate_hide=true&percTrainData_hide=true&dataset_hide=true&problem_hide=true&noise_hide=true&batchSize_hide=true) below using TensorFlow code. Compile it using the Adam optimizer, binary crossentropy loss and accuracy metric. Once it's compiled check a summary of the model.\n","![tensorflow playground example neural network](https://raw.githubusercontent.com/mrdbourke/tensorflow-deep-learning/main/images/02-tensorflow-playground-replication-exercise.png)\n","*Try this network out for yourself on the [TensorFlow Playground website](https://playground.tensorflow.org/#activation=relu&batchSize=10&dataset=circle&regDataset=reg-plane&learningRate=0.001&regularizationRate=0&noise=0&networkShape=6,6,6,6,6&seed=0.51287&showTestData=false&discretize=false&percTrainData=50&x=true&y=true&xTimesY=false&xSquared=false&ySquared=false&cosX=false&sinX=false&cosY=false&sinY=false&collectStats=false&problem=classification&initZero=false&hideText=false&regularization_hide=true&discretize_hide=true&regularizationRate_hide=true&percTrainData_hide=true&dataset_hide=true&problem_hide=true&noise_hide=true&batchSize_hide=true). Hint: there are 5 hidden layers but the output layer isn't pictured, you'll have to decide what the output layer should be based on the input data.*\n","3. Create a classification dataset using Scikit-Learn's [`make_moons()`](https://scikit-learn.org/stable/modules/generated/sklearn.datasets.make_moons.html) function, visualize it and then build a model to fit it at over 85% accuracy.\n","4. Create a function (or write code) to visualize multiple image predictions for the fashion MNIST at the same time. Plot at least three different images and their prediciton labels at the same time. Hint: see the [classifcation tutorial in the TensorFlow documentation](https://www.tensorflow.org/tutorials/keras/classification) for ideas.\n","5. Recreate [TensorFlow's](https://www.tensorflow.org/api_docs/python/tf/keras/activations/softmax) [softmax activation function](https://en.wikipedia.org/wiki/Softmax_function) in your own code. Make sure it can accept a tensor and return that tensor after having the softmax function applied to it.\n","6. Train a model to get 88%+ accuracy on the fashion MNIST test set. Plot a confusion matrix to see the results after.\n","7. Make a function to show an image of a certain class of the fashion MNIST dataset and make a prediction on it. For example, plot 3 images of the `T-shirt` class with their predictions.\n","\n"]},{"cell_type":"markdown","metadata":{"id":"oksgPs-meGHj"},"source":["## Extra curriculum ðŸ“–\n","* Watch 3Blue1Brown's neural networks video 2: [*Gradient descent, how neural networks learn*](https://www.youtube.com/watch?v=IHZwWFHWa-w). After you're done, write 100 words about what you've learned.\n","  * If you haven't already, watch video 1: [*But what is a Neural Network?*](https://youtu.be/aircAruvnKk). Note the activation function they talk about at the end.\n","* Watch [MIT's introduction to deep learning lecture 1](https://youtu.be/njKP3FqW3Sk) (if you haven't already) to get an idea of the concepts behind using linear and non-linear functions.\n","* Spend 1-hour reading [Michael Nielsen's Neural Networks and Deep Learning book](http://neuralnetworksanddeeplearning.com/index.html).\n","* Read the [ML-Glossary documentation on activation functions](https://ml-cheatsheet.readthedocs.io/en/latest/activation_functions.html). Which one is your favourite?\n","  * After you've read the ML-Glossary, see which activation functions are available in TensorFlow by searching \"tensorflow activation functions\"."]}]}